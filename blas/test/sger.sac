use StdIO: all;
use Array: all;
// use BlasLevel1: all;
use BlasLevel2: all;
use Helper: all;

int main() {
    compare(1,1,1f,[1f],1,[1f],1,[[1f]],1);
    compare(2,2,1f,tof(iota(2)),1,tof(iota(2)),1,reshape([2,2],tof(iota(4))),2);
    compare(3,2,1.333f,tof(iota(3)),1,tof(iota(2)),1,reshape([3,2],tof(iota(6))),2);
    compare(3,2,1.333f,tof(iota(5)),2,tof(iota(2)),1,reshape([3,2],tof(iota(6))),2);
    compare(3,2,1.333f,tof(iota(7)),3,tof(iota(2)),1,reshape([3,2],tof(iota(6))),2);
    compare(3,2,1.333f,tof(iota(7)),3,tof(iota(8)),3,reshape([3,2],tof(iota(6))),2);
    return 0;
}

// am == m and an == n not possible
void compare(int m, int n, float alpha, float[lenx] x, int incx, float[leny] y, int incy, float[am,an] a, int lda)
{
    a1 = OpenBlas::sger(m, n, alpha, x, incx, y, incy, a, lda);

    a2 = sger(m, n, alpha, x, incx, y, incy, a, lda);
    
    if(!(eq(a1,a2)))
    {
        printf("Error in sger. m:%d, n:%d, alpha:%f, incx:%d, incy:%f, lda:%d", m, n, alpha, incx, incy, lda); 
        print(a);
        print(x);
        print(y);
        print(a1);
        print(a2);
        printf("\n");
    }
}

float[m,n] sger(int m, int n, float alpha, float[lenx] x, int incx, float[leny] y, int incy, float[m,n] a, int lda)
{
  return {[i,j] -> a[i,j] + alpha * x[i*incx] * y[j*incy] | [i,j] < [m,n]};
}