use Array: all;
use StdIO: all;

// Task 1 and 2
# define BILLION 1000000000
int foo ( int [ n ] a )                         // a = 1;
{ 
    INC_RC(a, 2);                               // a = 3;
    if (RC(a) == 1) {                           // a = 3;
        // never happens
        b = a;                                  // a = b = 3;
    } else {
        // always happens
        ALLOC_INT(BILLION, b);                  // a = 3; b = 1;
        COPY_DATA(BILLION, a, b);               // a = 3; b = 1;
    }
    b = modarray ( a , [0] , a[0] + 1);
    RC_DEC(a, 2);                               // a = 1; b = 1;
    
    if (RC(b) == 1) {                           // a = 1; b = 1;
        // always happens
        c = b;                                  // a = 1; b = c = 1;
    } else {
        // never happens
        ALLOC_INT(BILLION, c);                  // a = 1; b = 1; c = 1;
        COPY_DATA(BILLION, b, c);               // a = 1; b = 1; c = 1;
    } 
    c = modarray ( b , [1] , a [1] + 42);       // a = 1; b = c = 1;
    RC_INC(c,1); RC_DEC(a,1);                   // a = 0; b = c = 2;
    
    res = c [1] + c [2];                        // b = c = 2;
    RC_DEC(c,2);                                // b = 0; c = 0;

    return res ;                                
}

int bar ( int [ n ] a )                         // a = 1
{ 
    INC_RC(a, 2);                               // a = 3; 
    if ( foo ( a ) == 44) {
        DEC_RC(a,2);                            // a = 1; once for check in if condition, once because the if-part of the if-then-else only contains one application of a.
        res = a[22];                            // a = 1;
        RC_DEC(a);                              // a = 0;
    } else {
        DEC_RC(a,1);                            // a = 2; for check in if condition
        res = a[2] + a[14];                     // a = 2; 
        DEC_RC(a,2);                            // a = 0;
    }
    return res ;                                // a = 0;
}
int main () {
    a = genarray ( [ BILLION ] , 0);            // a = 1
    x = bar ( a );                              // a = 1
    RC_DEC(a, 0);                               // a = 0
    return x ;                                  // a = 0
}


// Task 3 ref count optimization
// If statement in foo rewritten because it can never be reached.
// Ref count decreased in bar, saving a single rc call

# define BILLION 1000000000
int foo ( int [ n ] a )                         // a = 1;
{ 
    INC_RC(a, 2);                               // a = 3;
    ALLOC_INT(BILLION, b);                      // a = 3; b = 1;
    COPY_DATA(BILLION, a, b);                   // a = 3; b = 1;
    b = modarray ( a , [0] , a[0] + 1);         // a = 3; b = 1;
    RC_DEC(a, 2);                               // a = 1; b = 1;
    
    c = modarray ( b , [1] , a [1] + 42);       // a = 1; b = 1;
    RC_INC(c,2); RC_DEC(b,1); RC_DEC(a,1);      // a = 0; b = 0; c = 2;

    res = c [1] + c [2];                        // a = 0; b = 0; c = 2;
    RC_DEC(c,2);                                // a = 0; b = 0; c = 0; 

    return res ;                                // a = 0; b = 0; c = 0;
}
int bar ( int [ n ] a )                         // a = 1
{ 
    INC_RC(a, 1);                               // a = 2; 
    if ( foo ( a ) == 44) {                     // a = 2; 
        DEC_RC(a,1);                            // a = 1; once for check in if condition, once because the if-part of the if-then-else only contains one application of a.
        res = a[22];                            // a = 1;
        RC_DEC(a);                              // a = 0;
    } else {                                    
        res = a[2] + a[14];                     // a = 2;
        DEC_RC(a,2);                            // a = 0; 
    }
    return res ;                                // a = 0;
}
int main () {
    ALLOC_INT(BILLION, a);                      // a = 1
    a = genarray ( [ BILLION ] , 0);            // a = 1
    x = bar ( a );                              // a = 1
    RC_DEC(a, 0);                               // a = 0
    return x ;                                  // a = 0
}


// Task 3 reorder optimization
// I don't think reordering is possible because every line is dependent on previous variable defenitions.
int foo ( int [ n ] a )
{ 
    b = modarray ( a , [0] , a[0] + 1);
    c = modarray ( b , [1] , a[1] + 42);
    res = c[1] + c[2];
    return res;
}

int bar ( int [ n ] a )
{ 
    if ( foo ( a ) == 44) {
        res = a[22];
    } else {
        res = a[2] + a[14];
    }
    return res;
}

int main () {
    a = genarray ( [ BILLION ] , 0);
    x = bar ( a );
    return x;
}

// Task 4
// Everything can probably be optimized with supercompilation which would get rid of all the reference counting.


# define BILLION 1000000000
int foo ( int [ n ] a )                         // a = 1;
{ 
    INC_RC(a, 2);                               // a = 3;
    ALLOC_INT(BILLION, b);                      // a = 3; b = 1;
    COPY_DATA(BILLION, a, b); 
    RC_DEC(a, 1);                               // a = 2; b = 1;
    b[0] = a[0] + 1;                            // a = 2; b = 1;
    RC_DEC(a, 1);                               // a = 1; b = 1;
    
    c = b; 
    RC_INC(c,2); RC_DEC(b,1); 
    c[1] = a[1] + 42;                           // a = 1; b = 1;
    RC_DEC(a,1);                                // a = 0; b = 0; c = 2;

    res = c[1] + c[2];                          // a = 0; b = 0; c = 2;
    RC_DEC(c,2);                                // a = 0; b = 0; c = 0; 

    return res;                                 // a = 0; b = 0; c = 0;
}

int bar (int [n] a)                             // a = 1
{ 
    INC_RC(a, 1);                               // a = 2; 
    if (foo(a) == 44) {                         // a = 2; 
        DEC_RC(a,1);                            // a = 1; once for check in if condition, once because the if-part of the if-then-else only contains one application of a.
        res = a[22];                            // a = 1; 
        RC_DEC(a);                              // a = 0; 
    } else {                                    
        res = a[2] + a[14];                     // a = 2;      
        DEC_RC(a,2);                            // a = 0; 
    }
    return res;                                 // a = 0;
}

int main () {
    ALLOC_INT(BILLION, a);                      // a = 1
    a = genarray([BILLION], 0);                 // a = 1
    x = bar(a);                                 // a = 1
    RC_DEC(a, 0);                               // a = 0
    return x ;                                  // a = 0
}