use StdIO: all;
use Array: all;


// Use lib funcs such a min()
int[.] vtake (int[1] shp, int[.] vec) {
    if (all(shape(vec) < shp)) {
        s = shape(vec);
    } else {
        s = shp;
    }
    t = with { 
        ( [0] <= i < s)  : vec[i];
    } : genarray(shp, 0);

    return t;
}

int[.] vtake (int[0] shp, int[.] vec) {
    return vec;
}

int[*] atake (int[*] shp, int[*] a) {
    print("##############");
    print(shp);
    print(a);
    // print(shp*0);
    // print(shp);
    // print(shape(a));
    // print(min(shp, shape(a)));
    // print(a[0]);
    // print(genarray(shp,0));
    // print(shape(a[shp]));
    // print([1,2]++[3]);
    print(vtake(shape(shp),shape(a)));
    // return a;
    // res = with {
    //     (shp*0 <= iv < min(shp, shape(a))) : a[iv];
    // } : genarray(shp++shape(a[shp]),0);
    // return res;

    res = with {
        (0*shp <= iv < min(shp, vtake(shape(shp),shape(a)))): a[iv];
    } : genarray(shp, genarray(vdrop(shape(shp), shape(a)),0));
    return res;
}

int[.] vdrop (int[1] shp, int[.] vec) {
    t = with { 
        ( [0] <= i < max([0],shape(vec)-shp))  : vec[shp + i];
    } : genarray(max([0],shape(vec)-shp), 0);

    return t;
}

int[.] vdrop (int[0] shp, int[.] vec) {
    return vec;
}


int main() {
    // print( iota (12) );
    // a = reshape([2,6], iota (12) );
    // print( a );
    // print(take([2], a));
    // print(iota(5)+1);
    // print(shape(iota(5)+1));
    // print((iota(5)+1)[4]);
    // print(vtake([2], iota(5)+1));
    // print(vtake([7], iota(5)+1));
    // print(vtake([0], iota(5)+1));
    // print(vtake([], iota(5)+1));
    // print(shape([2]));
    // print(shape([]));

    // print(vdrop([2], iota(5)+1)); // [3,4,5]
    // print(vdrop([7], iota(5)+1)); // []
    // print(vdrop([0], iota(5)+1));
    // print(vdrop([], iota(5)+1));

    // print(atake([2,2], [[1,2,3],[4,5,6]])); // [[1,2],[4,5]]
    // print(atake([3,4], [[1,2,3],[4,5,6]])); // [[1,2,3,0],[4,5,6,0],[0,0,0,0]]
    // print(atake([1], [[1,2,3],[4,5,6]]));
    // print([[1,2,3],[4,5,6]][1]);
    print(summ([[1,2,3],[4,5,6]]));
    return 0;
}

int summ (int[.] v) 
{
    s = 0;
    for(i=0; i< shape(v)[0]; i++)
        s += v[i];
    return s;
}

int summ (int[.,.] v) 
{
    // print([shape(v)[0]]);
    
    // print(v[[0]]);
    // print(v[[1]]);
    // print(shape(v));
    // print(shape(v)[0]);
    // return 1;
    res = with {
        ([0] <= i < [shape(v)[0]]): summ(v[i]);
    } : genarray([shape(v)[0]], 0);
    return summ(res);
}