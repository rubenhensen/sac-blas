module Helper;

use StdIO: all;
use Array: all;

export all;

// bool eq (int[d1:shp1] a, int[d2:shp2] b) {
//     return all(a == b) && all(shp1==shp2) && all(d1==d2);
// }

bool eq (float[d1:shp1] a, float[d2:shp2] b) {
    return all(a == b) && all(shp1==shp2) && all(d1==d2);
}

// bool eq (complex[d1:shp1] a, complex[d2:shp2] b) {
//     return all(a == b) && all(shp1==shp2) && all(d1==d2);
// }

// bool eq (float[*] a, float[*] b) {
//     return all(a == b);
// }

// bool eq (complex[*] a, complex[*] b) {
//     return all(a == b); //&& all(shp1==shp2) && all(d1==d2);
// }

// bool eq (complex[d1:shp1] a, complex[d2:shp2] b) {
//     return all(a == b) && all(shp1==shp2) && all(d1==d2);
// }


bool almost_eq (float[d1:shp1] a, float[d2:shp2] b) {
    MAX_ACC_LOSS = 0.0001f;

    return all(abs(a - b) < MAX_ACC_LOSS) && all(shp1==shp2) && all(d1==d2);
}

bool ismember(char c, char[n] ca)
{
  b = false;
  for(i=0; i<n;i++) {
    if (ca[i] == c) b = true;
  }
  return b;
}

bool ismember(float c, float[n] ca)
{
  b = false;
  for(i=0; i<n;i++) {
    if (ca[i] == c) b = true;
  }
  return b;
}

bool ismember(int c, int[n] ca)
{
  b = false;
  for(i=0; i<n;i++) {
    if (ca[i] == c) b = true;
  }
  return b;
}

bool ismember(double c, double[n] ca)
{
  b = false;
  for(i=0; i<n;i++) {
    if (ca[i] == c) b = true;
  }
  return b;
}

bool minArrLen(int n, int arrLength, int inc)
{
    return arrLength  > (n-1)*inc;
}

float[m] padVector(int k, float[n] arr)
{
  return { iv -> arr[iv] | iv < shape(arr);
           iv -> 0.0f  | iv < [k]       
         };
}