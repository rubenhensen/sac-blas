use StdIO: all;
use Array: all;
// use BlasLevel1: all;
use BlasLevel2: all;
use Helper: all;

int main() {
    // a = tof(reshape([3,3], iota(9)));
    // x = tof(iota(3));
    // y = tof([1,1,1]);
    // compare('u',3,1f,a,3,x,1, 1f, y,1);
    // compare('l',3,1f,a,3,x,1, 1f, y,1);

    // a = tof(reshape([4,4], iota(16)));
    // x = tof(iota(4));
    // y = tof(reverse(iota(4)));
    // compare('u',4,1f,a,4,x,1, 1f, y,1);
    // compare('l',4,1f,a,4,x,1, 1f, y,1);

    // a = tof(reshape([4,4], iota(16)));
    // x = tof(iota(7));
    // y = tof(reverse(iota(7)));
    // compare('u',4,1.1f,a,4,x,2, 1.33f, y,2);
    // compare('l',4,2.4f,a,4,x,2, 1.66f, y,2);

    return 0;
}

void compare(char uplo, int n, int k, float alpha, float[*] a, int lda, float[*] x, int incx, float beta, float[*] y, int incy)
{
    y1 = OpenBlas::ssbmv(uplo, n, k, alpha, a, lda, x, incx, beta, y, incy);
    y2 = ssbmv(uplo, n, k, alpha, a, lda, x, incx, beta, y, incy);
    
    if(!(almost_eq(y1,y2)))
    {
        printf("Error in ssymv. uplo:%d, n:%d, alpha:%f, lda:%d, incx:%d, beta:%f, incy:%d\n", uplo, n, alpha, lda, incx, beta, incy); 
        print(a);
        print(x);
        print(y);
        print(y1);
        print(y2);
        printf("\n");
    }
}

float[*] ssbmv(char uplo, int n, int k, float alpha, float[*] a, int lda, float[*] x, int incx, float beta, float[*] y, int incy)
{
    betaY =   BlasLevel1::sscal(n, beta, y, incy);
    alphaX =  {iv -> alpha * x[iv*incx]         | iv < [n]};
    if (uplo == 'u' || uplo == 'U') {
        resA =    {iv -> sum((take(iv, transpose(a)[iv]) ++ drop(iv, a[iv])) * alphaX) | iv < [n]};
    } else {
        resA =    {iv -> sum((take(iv, a[iv]) ++ drop(iv, transpose(a)[iv])) * alphaX) | iv < [n]};
    }
    res =     {iv -> resA[iv/incy] +  betaY[iv] | iv < [(n-1)*incy+1] step [incy] ; iv -> y[iv]};

   return res;
}