/**********************************************************************
 *
 * SAC bug report: week1.sacbugreport
 *
 **********************************************************************
 *
 * Automatically generated on Mon Feb 12 04:42:14 PM CET 2024
 *
 * using sac2c 1.3.3-MijasCosta-1145-gdde1e
 * built 2024-02-04T08:00:04.
 * by user  on host runner-qipqeg7c-project-39-concurrent-2.
 *
 * The compiler was called by
 *  sac2c -check tc week1.sac
 *
 * The compiler crashed in
 *  phase: popt (Preparing for code optimization)
 *  sub phase: cuq (Checking uniqueness)
 *
 * What follows is the contents of week1.sac.
 *
 **********************************************************************/

use StdIO: all;
use Array: all;

// use sac2c -check t ./file
int main() {
    // a = reshape([5,3], iota (15));
    // b = take([2], a);
    // c = drop([2], a);
    // x,y = takedrop ([2], a);
    // print("a");
    // print(a);
    // print("\ntake");
    // print(b);
    // print("\ndrop");
    // print(c);
    // print("\ntake of takedrop");
    // print(x);
    // print("\ndrop of takedrop");
    // print(y);
    // print("\ntod (to double)");
    // d = tod(a);
    // print(d);
    // print(shape(shape([])));
    // print([1,2,3] [3]);
    // print([[]] [4]);
    // print(reshape([2,3,4], iota(24)) + [[[1]]]);
    // print(reshape([2,3,4], iota(24)) + 1);


    // print(recip ([2.0,0.0,3.0]));


    // Questions
    // Why does below reshape function not work
    // What domain restrictions are there except all x >= 0?
    // Typo in exercise 1.3 "Eexample"


    // print(reshape ([1], 42));
    // print(myReshape ([10,4], iota(40))); // WERKT NIET??
    // Error messages seem incorrect still.
    // What are conformity checks?
    // Zijn out of bound checks kort door de bocht.
    // runtime type errors?



    // print(plus(3,4));

    
    // 1.1 myGenarray
    print("\n##### 1.1 myGenarray #####");
    // print(genarray ([-2], 42));
    // print(myGenarray([-2], 42));
    // print(genarray ([2], 42));
    // print(myGenarray ([2], 42));
    print(eq(genarray ([2], 42),myGenarray ([2], 42)));

    // print(genarray ([2], [1,2,3]));
    // print(myGenarray ([2], [1,2,3]));
    print(eq(genarray ([2], [1,2,3]), myGenarray ([2], [1,2,3])));

    // print(myGenarray ([2,2], [1,2,3,4]));
    // print(myGenarray ([2,2], [1,2,3,4]));
    print(eq(genarray ([2,2], [1,2,3,4]), myGenarray ([2,2], [1,2,3,4])));

    // print(myGenarray ([], [1,2,3,4]));
    // print(genarray ([], [1,2,3,4]));
    print(eq(genarray ([], [1,2,3,4]), myGenarray ([], [1,2,3,4])));
    // print("#########");
    // print(myGenarray ([3,3], [[1,2],[3,4]]));

    // 1.2 genarrayI
    // print("\n##### 1.2 genarrayI #####");
    // print(genarrayI ([2], 42));
    print(eq(genarrayI ([2], 42), [42,42]));

    // print(genarrayI ([2], [1,2,3]));
    // print([[1,1],[2,2],[3,3]]);
    print(eq(genarrayI ([2], [1,2,3]), [[1,1],[2,2],[3,3]]));

    // print(genarrayI ([2,2], [1,2,3,4]));
    // print([[[1,1],[1,1]],[[2,2],[2,2]],[[3,3],[3,3]],[[4,4],[4,4]]]);
    print(eq(genarrayI ([2,2], [1,2,3,4]), [[[1,1],[1,1]],[[2,2],[2,2]],[[3,3],[3,3]],[[4,4],[4,4]]]));
    
    // print(genarrayI ([], [1,2,3,4]));
    // print([1,2,3,4]);
    print(eq(genarrayI ([], [1,2,3,4]), [1,2,3,4]));
    

    // 1.3 myTake1
    print("\n##### 1.3 myTake1 #####");
    print( myTake1 ([1], [21,42]) );
    print( [21] );
    print( eq(myTake1 ([1], [21,42]), [21]) );


    // print( myTake1 ([2,3], reshape ([10,5], iota(50))) );
    // print( [[0,1,2], [5,6,7]] );
    print( eq(myTake1 ([2,3], reshape ([10,5], iota(50))), [[0,1,2], [5,6,7]]));

    // print( myTake1 ([1], reshape ([10,5], iota(50))) );
    // print( [[0,1,2,3,4]] );
    // print( take([1], reshape ([10,5], iota(50)) ));
    print( eq(myTake1 ([1], reshape ([10,5], iota(50))), [[0,1,2,3,4]]) );

    // print( myTake1 ([], reshape ([10,5], iota(50))) );
    // print( reshape ([10,5], iota(50)) );
    print( eq(myTake1 ([], reshape ([10,5], iota(50))), reshape ([10,5], iota(50))) );

    // print( myTake1 ([0], reshape ([10,5], iota(50))) );
    // print( reshape([0,5], []) );
    print( eq(myTake1 ([0], reshape ([10,5], iota(50))), reshape([0,5], [])) );


    // print( [] <= [1,2,3] && (all(shp <= shp2) || shp == []));
    // print(all([] == []));

    // print( myTake2 ([2], [1]) );
    // print( myTake2 ([11,6], reshape ([10,5], iota(50))) );

    // print( myTake3 ([3,3,4], [[1,2],[3,4],[5,6]]) );
    // print (myTake3())

    // a = reshape([3,3], iota(9));
    // b = take([2,2],a);
    // print(a);
    // print(b);
    // print(a==b);
    // print(eq(a,b));

    return 0;
}

int[*] myTake3 (int[d1] shp, int[d2:shp2] data) 
{
    if(d1 - d2 > 0) {
        diff = d1 - d2;
        diffarr = genarray([diff], 1);
        newshp = shp2 ++ diffarr;
        data = reshape(newshp, data);
    } 
    return {iv -> data[iv] | iv < shape(data);
            iv -> 0 | iv < shp};
}

int[*] myTake2 (int[d1:shp1] shp, int[d2:shp2] data) | shp1[0] <= d2 
{
    return {iv -> data[iv] | iv < shape(data);
            iv -> 0 | iv < shp};
}

int[shp] myTake1 (int[n] shp, int[d1:shp1] data) | n <= d1 && (all(shp == []) || all(shp < shp1)) && all (shp >= 0)
{
    return {iv -> data[iv] | iv < shp};
}

int[d:shp1, n:shp] genarrayI (int[n] shp, int[d:shp1] data) | all (shp >= 0)
{
    return {iv -> myGenarray(shp, data[iv])| shape(data)*0 <= iv < shape(data) };
}

int[n:shp,d:shp1] myGenarray (int[n] shp, int[d:shp1] data) | all (shp >= 0)
{
    return {iv -> data | [0] <= iv < shp};
}

int[d:n] myReshape (int[n] shp, int[*] data)
{
    return reshape(shp, data);
}

int[*] plus (int[*] a, int[*] b)
{
    return a + b;
}

int[*], int[*] takedrop(int[.] shp, int[*] a) {
    x = take(shp, a);
    y = drop(shp, a);
    return (x, y);
}

double[*] sumV (double[+] a) {
    return [0.0];
}

double[n] recip (double[n] x) | all (x != 0.0) 
{
    return 1.0/x;
}

bool eq (int[d1:shp1] a, int[d2:shp2] b) {
    return all(a == b) && all(shp1==shp2) && all(d1==d2);
}



/**********************************************************************
 *
 * End of bug report
 *
 **********************************************************************/

