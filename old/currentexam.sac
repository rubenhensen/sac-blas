use StdIO: all;
use Array: all;
use List: all except{drop, take};

// shape()
// sel()
// take()
// drop()
// dim()
// ++
// +, -, *, /
// &&, ||
// <=, <, > , >=

// sum()
// prod()


// how to do tensor comprehensions?

int main() {
    a = [1,2,3,4];
    b = modarray( a, [0], 5);
    c = modarray( a, [1], 6);

    mat = [[1,2,3],[4,5,6]];
    shp = [2,3,4];

    d = { iv -> a[iv] + 1 }; // == a + 1
    // dp = with {
    //     (shape(a)*0 <= iv < shape(a)) : a[iv] + 1;
    // } : genarray(shape(a), 0);

    e = { [i,j] -> mat[[j,i]] }; // == transpose (mat)
    // ep = with {
    //     (transpose(shape(mat))*0 <= [i,j] < [mat[]]): mat[[j,i]];
    // }: genarray([3,2], 0);

    ep = with {
        ( . <= iv <= . ) : mat[ reverse( iv)]; 
    } : genarray( reverse( shape(mat)), 0);

    f = { [i,j]-> (i==j? mat[[i,j]]: 0) };

    fp = with {
        (. <=  [i,j] <= .) : i==j ? mat[[i,j]]:0;
    }: genarray(shape(mat),0);

    g = { iv -> mat[iv] | iv < [1,2] }; // == take (shp, a)
    h = { iv -> mat[iv] | [0,0] < iv};
    // i = {   [i] -> a[i];
    //         [i] -> b[i - shape(a)]    | [i] < shape(a) + shape(b) 
    //     }; // == a ++ b

    i = { [i] -> a[i] ;
        [i] -> b[i - shape(a)] | shape(a) <= [i] < shape(a) + shape(b) } ;


    // print (a);
    // print(a);
    // print(b);
    // print(c);
    // print(d);
    // print(dp);
    // print(e);
    // print(ep);
    // print(shape(mat));
    // print(transpose(shape(mat)));
    // print(f);
    // print(fp);
    print(mat);
    print(g);
    print(h);
    // print(i);
    // print(len(a));
    // print(shape(a) + shape(b));
    print(i);
    

    return 0;
}


int len(int[+] a) {
    return sum(shape(a));
}

// (int[*], int[*]) takedrop(int[*] shp, int[*] a) {
//     return (take(shp,a),drop(shp,a));
// }