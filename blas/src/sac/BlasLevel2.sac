module BlasLevel2;

use StdIO: all;
use Array: all;
use Helper: all;
export all;

// Float
float[*] sgbmv(char trans, int m, int n, int kl, int ku, float alpha, float[am,an] a, int lda, float[xn] x, int incx, float beta, float[yn] y, int incy) | ismember(trans, ['n', 'N', 't', 'T', 'c', 'C']), m >= 0, n >= 0, sgemvXdim(trans, m, n, incx, xn), incx != 0, sgemvYdim(trans, m, n, incy, yn), incy != 0 , kl >=0, ku >=  0, lda == kl + ku + 1
{
  if (trans == 'N' | trans == 'n') {
    lenx = n;
    leny = m;
  } else {
    lenx = m;
    leny = n;
    a = bandStorageToFull(a, kl, ku, m, n);
    a = transpose(a);
    a = fullStorageToBand(a, ku, kl, n, m);
  }

  betaY =   BlasLevel1::sscal(leny, beta, y, incy);
  alphaX =  {iv -> alpha * x[iv*incx]         | iv < [lenx]};

  resA = { [i] -> sum(padVectorBack(an,drop([kl-i], a[i]))   * take([an], alphaX))    | [i] < [kl];
           [i] -> sum(a[i]              * take([an], drop([i-1],alphaX)))      | [i] < [am] };

  res =     {iv -> resA[iv/incy] +  betaY[iv] | iv <= [(leny-1)*incy] step [incy] ; iv -> y[iv]};
  
  return res;
}

float[yn] sgemv(char trans, int m, int n, float alpha, float[am,an] a, int lda, float[xn] x, int incx, float beta, float[yn] y, int incy) | ismember(trans, ['n', 'N', 't', 'T', 'c', 'C']), m >= 0, n >=0, lda >= max(1,n), sgemvXdim(trans, m, n, incx, xn), incx != 0, sgemvYdim(trans, m, n, incy, yn), incy != 0
{
  if (trans == 'N' | trans == 'n') {
    lenx = n;
    leny = m;
  } else {
    lenx = m;
    leny = n;
    a = transpose(a);
  }

  betaY =   BlasLevel1::sscal(leny, beta, y, incy);
  alphaX =  {iv -> alpha * x[iv*incx]         | iv < [lenx]};
  resA =    {iv -> sum(a[iv] * alphaX)        | iv < [leny]};
  res =     {iv -> resA[iv/incy] +  betaY[iv] | iv <= [(leny-1)*incy] step [incy] ; iv -> y[iv]};

  return res;
}

float[m,n] sger(int m, int n, float alpha, float[lenx] x, int incx, float[leny] y, int incy, float[m,n] a, int lda)
{
  return {[i,j] -> a[i,j] + alpha * x[i*incx] * y[j*incy] | [i,j] < [m,n]};
}

float[*] ssbmv(char uplo, int n, int k, float alpha, float[*] a, int lda, float[*] x, int incx, float beta, float[*] y, int incy)
{
    betaY =   BlasLevel1::sscal(n, beta, y, incy);
    alphaX =  {iv -> alpha * x[iv*incx]         | iv < [n]};
    if (uplo == 'u' || uplo == 'U') {
        resA =    {iv -> sum((take(iv, transpose(a)[iv]) ++ drop(iv, a[iv])) * alphaX) | iv < [n]};
    } else {
        resA =    {iv -> sum((take(iv, a[iv]) ++ drop(iv, transpose(a)[iv])) * alphaX) | iv < [n]};
    }
    res =     {iv -> resA[iv/incy] +  betaY[iv] | iv <= [(n-1)*incy] step [incy] ; iv -> y[iv]};

    return res;
}

float[yn] sspmv(char uplo, int n, float alpha, float[.] ap, float[xn] x, int incx, float beta, float[yn] y, int incy)
{
    a = trttrs('u', ap, n);
    betaY =   BlasLevel1::sscal(n, beta, y, incy);
    alphaX =  {iv -> alpha * x[iv*incx]         | iv < [n]};
    if (uplo == 'u' || uplo == 'U') {
        resA =    {iv -> sum((take(iv, transpose(a)[iv]) ++ drop(iv, a[iv])) * alphaX) | iv < [n]};
    } else {
        resA =    {iv -> sum((take(iv, a[iv]) ++ drop(iv, transpose(a)[iv])) * alphaX) | iv < [n]};
    }
    res =     {iv -> resA[iv/incy] +  betaY[iv] | iv <= [(n-1)*incy] step [incy] ; iv -> y[iv]};

   return res;
}

float[apn] sspr(char uplo, int n, float alpha, float[xn] x, int incx, float[apn] ap)
{
    full = trttrs(uplo, ap, n);
    xMat = {[i,j] -> alpha * x[i*incx] * x[j*incx] | [i,j] < [n,n]};
    if (uplo == 'U' || uplo == 'u') {
        inter = {iv -> ((take(iv, transpose(full)[iv]) ++ drop(iv, full[iv])) + xMat[iv]) | iv < [n]};
    } else {
        inter = {iv -> ((take(iv, full[iv]) ++ drop(iv, transpose(full)[iv])) + xMat[iv]) | iv < [n]};
    }
    res = trttps(uplo, inter);
    return res;
}

float[apn] sspr2(char uplo, int n, float alpha, float[xn] x, int incx, float[yn] y, int incy, float[apn] ap)
{
    full = trttrs(uplo, ap, n);
    xMat = {[i,j] -> alpha * x[i*incx] * y[j*incy] | [i,j] < [n,n]};
    yMat = {[i,j] -> alpha * y[j*incy] * x[i*incx] | [i,j] < [n,n]};
    if (uplo == 'U' || uplo == 'u') {
        inter = {iv -> ((take(iv, transpose(full)[iv]) ++ drop(iv, full[iv])) + xMat[iv] + yMat[iv]) | iv < [n]};
    } else {
        inter = {iv -> ((take(iv, full[iv]) ++ drop(iv, transpose(full)[iv])) + xMat[iv] + yMat[iv]) | iv < [n]};
    }
    res = trttps(uplo, inter);
    return res;
}


float[leny] ssymv(char uplo, int n, float alpha, float[d:shp] a, int lda, float[lenx] x, int incx, float beta, float[leny] y, int incy) | ismember(uplo, ['u', 'U', 'l', 'L'])
{
    betaY =   BlasLevel1::sscal(n, beta, y, incy);
    alphaX =  {iv -> alpha * x[iv*incx]         | iv < [n]};
    if (uplo == 'u' || uplo == 'U') {
        resA =    {iv -> sum((take(iv, transpose(a)[iv]) ++ drop(iv, a[iv])) * alphaX) | iv < [n]};
    } else {
        resA =    {iv -> sum((take(iv, a[iv]) ++ drop(iv, transpose(a)[iv])) * alphaX) | iv < [n]};
    }
    res =     {iv -> resA[iv/incy] +  betaY[iv] | iv <= [(n-1)*incy] step [incy] ; iv -> y[iv]};

   return res;
}


float[am,an] ssyr(char uplo, int n, float alpha, float[*] x, int incx, float[am,an] a, int lda)
{
    xMat = {[i,j] -> alpha * x[i*incx] * x[j*incx] | [i,j] < [n,n]};
    if (uplo == 'U' || uplo == 'u') {
        res = {iv -> take(iv, a[iv]) ++ (drop(iv, a[iv]) + drop(iv, xMat[iv])) | iv < [n]};
    } else {
        res = {iv -> (take(iv+1, a[iv]) + take(iv+1, xMat[iv])) ++ drop(iv+1, a[iv]) | iv < [n]};
    }
    return res;
}


float[am,an] ssyr2(char uplo, int n, float alpha, float[*] x, int incx, float[*] y, int incy, float[am,an] a, int lda)
{
    xMat = {[i,j] -> alpha * x[i*incx] * y[j*incy] | [i,j] < [n,n]};
    yMat = {[i,j] -> alpha * y[i*incx] * x[j*incy] | [i,j] < [n,n]};
    if (uplo == 'U' || uplo == 'u') {
        res = {iv -> take(iv, a[iv]) ++ (drop(iv, a[iv]) + drop(iv, xMat[iv]) + drop(iv, yMat[iv])) | iv < [n]};
    } else {
        res = {iv -> (take(iv+1, a[iv]) + take(iv+1, xMat[iv]) + take(iv+1, yMat[iv])) ++ drop(iv+1, a[iv]) | iv < [n]};
    }
    return res;
}


// float[xn] stbmv(char uplo, char trans, char diag, int n, int k, float[an,am] a, int lda, float[xn] x, int incx) | ismember(uplo, ['u', 'U', 'l', 'L']), ismember(trans, ['n', 'N', 't', 'T', 'c', 'C']), ismember(diag, ['u', 'U', 'n', 'N']), n >= 0,  incx != 0, lda > 0, lda >= k+1, k >= 0
// {
//   xt = { [iv] -> x[iv*incx] | [iv] < [n]};

//   if (trans != 'N' && trans != 'n') {
//     a = transpose(a);
//     if (uplo == 'U' || uplo == 'u') {
//       uplo = 'l';
//     } else {
//       uplo = 'u';
//     }
//   }

//   inter = [1.0f];

//   if ((uplo == 'U' || uplo == 'u') && (diag == 'N' || diag == 'n')) {
//     // upper
//     a = upperTriangleBandStorageToFull(a, k);
//     inter = { [iv] -> sum(drop([iv],a[iv]) * drop([iv],xt)) | [iv] < [n] };
//   } 

//   if ((uplo == 'U' || uplo == 'u') && (diag == 'U' || diag == 'u')) {
//     // upper unit
//     a = upperTriangleBandStorageToFull(a, k);
//     inter = { [iv] -> sum(drop([iv+1],a[iv]) * drop([iv+1],xt)) + xt[iv] | [iv] < [n] };
//   } 

//   if ((uplo == 'L' || uplo == 'l') && (diag == 'N' || diag == 'n')) {
//     // lower
//     a = lowerTriangleBandStorageToFull(a, k);
//     inter = { [iv] -> sum(take([iv+1],a[iv]) * take([iv+1],xt)) | [iv] < [n] };
//   } 
  
//   if ((uplo == 'L' || uplo == 'l') && (diag == 'U' || diag == 'u')) {
//     // lower unit
//     a = lowerTriangleBandStorageToFull(a, k);
//     inter = { [iv] -> sum(take([iv],a[iv]) * take([iv],xt)) + xt[iv]| [iv] < [n] };
//   } 


//   res = { [iv] -> inter[iv/incx] | [iv] <= [(xn-1)*incx] step [incx]; 
//           [iv] -> x[iv]};

//   return res;
// }

float[xn] stbsv(char uplo, char trans, char diag, int n, int k, float[an,am] a, int lda, float[xn] x, int incx)// | ismember(uplo, ['u', 'U', 'l', 'L']), ismember(trans, ['n', 'N', 't', 'T', 'c', 'C']), ismember(diag, ['u', 'U', 'n', 'N']), n >= 0,  incx != 0, lda > 0, lda >= k+1, k >= 0
{
//   xt = { [iv] -> x[iv*incx] | [iv] < [n]};

//   if (trans != 'N' && trans != 'n') {
//     a = transpose(a);
//     if (uplo == 'U' || uplo == 'u') {
//       uplo = 'l';
//     } else {
//       uplo = 'u';
//     }
//   }

//   inter = [1.0f];

//   if ((uplo == 'U' || uplo == 'u') && (diag == 'N' || diag == 'n')) {
//     // upper
//     a = upperTriangleBandStorageToFull(a, k);
//     inter = { [iv] -> sum(drop([iv],a[iv]) * drop([iv],xt)) | [iv] < [n] };
//   } 

//   if ((uplo == 'U' || uplo == 'u') && (diag == 'U' || diag == 'u')) {
//     // upper unit
//     a = upperTriangleBandStorageToFull(a, k);
//     inter = { [iv] -> sum(drop([iv+1],a[iv]) * drop([iv+1],xt)) + xt[iv] | [iv] < [n] };
//   } 

//   if ((uplo == 'L' || uplo == 'l') && (diag == 'N' || diag == 'n')) {
//     // lower
//     a = lowerTriangleBandStorageToFull(a, k);
//     inter = { [iv] -> sum(take([iv+1],a[iv]) * take([iv+1],xt)) | [iv] < [n] };
//   } 
  
//   if ((uplo == 'L' || uplo == 'l') && (diag == 'U' || diag == 'u')) {
//     // lower unit
//     a = lowerTriangleBandStorageToFull(a, k);
//     inter = { [iv] -> sum(take([iv],a[iv]) * take([iv],xt)) + xt[iv]| [iv] < [n] };
//   } 


//   res = { [iv] -> inter[iv/incx] | [iv] <= [(xn-1)*incx] step [incx]; 
//           [iv] -> x[iv]};

  return x;
}

float[xn] stpmv(char uplo, char trans, char diag, int n, float[an] ap, float[xn] x, int incx) | ismember(uplo, ['u', 'U', 'l', 'L']), ismember(trans, ['n', 'N', 't', 'T', 'c', 'C']), ismember(diag, ['u', 'U', 'n', 'N']), n >= 0, an >= n*(n+1)/2,  incx != 0
{
  xt = { [iv] -> x[iv*incx] | [iv] < [n]};
  res = { [iv] -> sum(take([n-iv],drop([idx(n, iv)], ap)) * drop([iv/incx], xt)) | [iv] <= [(xn-1)*incx] step [incx]; 
          [iv] -> x[iv]};

  return res;
}

float[xn] stpsv(char uplo, char trans, char diag, int n, float[apn] ap, float[xn] x, int incx)// | ismember(uplo, ['u', 'U', 'l', 'L']), ismember(trans, ['n', 'N', 't', 'T', 'c', 'C']), ismember(diag, ['u', 'U', 'n', 'N']), n >= 0,  incx != 0, lda > 0, lda >= k+1, k >= 0
{
  xt = { [iv] -> x[iv*incx] | [iv] < [n]};

  if (uplo == 'U' || uplo == 'u') {
    a = trttrs('u', ap, n);
  } else {
    a = trttrs('l', ap, n);
  }

  if (trans != 'N' && trans != 'n') {
    a = transpose(a);
    if (uplo == 'U' || uplo == 'u') {
      uplo = 'l';
    } else {
      uplo = 'u';
    }
  } 

  if ((uplo == 'U' || uplo == 'u') && (diag == 'N' || diag == 'n')) {
    for (i = 0; i < xn; i++) {
      subtract = sum(take([-i], a[xn-1-i]) * take([-i], x));
      x[i] = (x[xn-1-i]-subtract) / a[n-1-i][n-1-i];
    } 
  } 

  if ((uplo == 'U' || uplo == 'u') && (diag == 'U' || diag == 'u')) {
    for (i = 0; i < xn; i++) {
      subtract = sum(take([-i], a[xn-1-i]) * take([-i], x));
      x[i] = (x[xn-1-i]-subtract);
    } 
  } 

  if ((uplo == 'L' || uplo == 'l') && (diag == 'N' || diag == 'n')) { 
    for (i = 0; i < xn; i++) {
      subtract = sum(take([i], a[i]) * take([i], x));
      x[i] = (x[i]-subtract) / a[i][i];
    } 
  } 
  
  if ((uplo == 'L' || uplo == 'l') && (diag == 'U' || diag == 'u')) {
    for (i = 0; i < xn; i++) {
      subtract = sum(take([i], a[i]) * take([i], x));
      x[i] = (x[i]-subtract);
    } 
  } 

  return x;
}


float[xn] strmv(char uplo, char trans, char diag, int n, float[an,am] a, int lda, float[xn] x, int incx) | ismember(uplo, ['u', 'U', 'l', 'L']), ismember(trans, ['n', 'N', 't', 'T', 'c', 'C']), ismember(diag, ['u', 'U', 'n', 'N']), n >= 0,  incx != 0, lda >= max(1,n)
{
  xt = { [iv] -> x[iv*incx] | [iv] < [n]};

  if (trans != 'N' && trans != 'n') {
    a = transpose(a);
    if (uplo == 'U' || uplo == 'u') {
      uplo = 'l';
    } else {
      uplo = 'u';
    }
  }

  inter = [1.0f];

  if ((uplo == 'U' || uplo == 'u') && (diag == 'N' || diag == 'n')) {
    // upper
    inter = { [iv] -> sum(drop([iv],a[iv]) * drop([iv],xt)) | [iv] < [n] };
  } 

  if ((uplo == 'U' || uplo == 'u') && (diag == 'U' || diag == 'u')) {
    // upper unit
    inter = { [iv] -> sum(drop([iv+1],a[iv]) * drop([iv+1],xt)) + xt[iv] | [iv] < [n] };
  } 

  if ((uplo == 'L' || uplo == 'l') && (diag == 'N' || diag == 'n')) {
    // lower
    inter = { [iv] -> sum(take([iv+1],a[iv]) * take([iv+1],xt)) | [iv] < [n] };
  } 
  
  if ((uplo == 'L' || uplo == 'l') && (diag == 'U' || diag == 'u')) {
    // lower unit
    inter = { [iv] -> sum(take([iv],a[iv]) * take([iv],xt)) + xt[iv]| [iv] < [n] };
  } 

  res = { [iv] -> inter[iv/incx] | [iv] <= [(xn-1)*incx] step [incx]; 
          [iv] -> x[iv]};

  return res;
}


float[xn] strsv(char uplo, char trans, char diag, int n, float[an,am] a, int lda, float[xn] x, int incx)// | ismember(uplo, ['u', 'U', 'l', 'L']), ismember(trans, ['n', 'N', 't', 'T', 'c', 'C']), ismember(diag, ['u', 'U', 'n', 'N']), n >= 0,  incx != 0, lda > 0, lda >= k+1, k >= 0
{
  xt = { [iv] -> x[iv*incx] | [iv] < [n]};

  if (trans != 'N' && trans != 'n') {
    a = transpose(a);
    if (uplo == 'U' || uplo == 'u') {
      uplo = 'l';
    } else {
      uplo = 'u';
    }
  }

  if ((uplo == 'U' || uplo == 'u') && (diag == 'N' || diag == 'n')) {
    for (i = 0; i < xn; i++) {
      subtract = sum(take([-i], a[xn-1-i]) * take([-i], x));
      x[i] = (x[xn-1-i]-subtract) / a[an-1-i][am-1-i];
    } 
  } 

  if ((uplo == 'U' || uplo == 'u') && (diag == 'U' || diag == 'u')) {
    for (i = 0; i < xn; i++) {
      subtract = sum(take([-i], a[xn-1-i]) * take([-i], x));
      x[i] = (x[xn-1-i]-subtract);
    } 
  } 

  if ((uplo == 'L' || uplo == 'l') && (diag == 'N' || diag == 'n')) { 
    for (i = 0; i < xn; i++) {
      subtract = sum(take([i], a[i]) * take([i], x));
      x[i] = (x[i]-subtract) / a[i][i];
    } 
  } 
  
  if ((uplo == 'L' || uplo == 'l') && (diag == 'U' || diag == 'u')) {
    for (i = 0; i < xn; i++) {
      subtract = sum(take([i], a[i]) * take([i], x));
      x[i] = (x[i]-subtract);
    } 
  } 

  return x;
}


// Double
double[*] dgbmv(char trans, int m, int n, int kl, int ku, double alpha, double[am,an] a, int lda, double[xn] x, int incx, double beta, double[yn] y, int incy) | ismember(trans, ['n', 'N', 't', 'T', 'c', 'C']), m >= 0, n >= 0, sgemvXdim(trans, m, n, incx, xn), incx != 0, sgemvYdim(trans, m, n, incy, yn), incy != 0 , kl >=0, ku >=  0, lda == kl + ku + 1
{
  if (trans == 'N' | trans == 'n') {
    lenx = n;
    leny = m;
  } else {
    lenx = m;
    leny = n;
    a = bandStorageToFull(a, kl, ku, m, n);
    a = transpose(a);
    a = fullStorageToBand(a, ku, kl, n, m);
  }

  betaY =   BlasLevel1::dscal(leny, beta, y, incy);
  alphaX =  {iv -> alpha * x[iv*incx]         | iv < [lenx]};

  resA = { [i] -> sum(padVectorBack(an,drop([kl-i], a[i]))   * take([an], alphaX))    | [i] < [kl];
           [i] -> sum(a[i]              * take([an], drop([i-1],alphaX)))      | [i] < [am] };

  res =     {iv -> resA[iv/incy] +  betaY[iv] | iv <= [(leny-1)*incy] step [incy] ; iv -> y[iv]};
  
  return res;
}

double[yn] dgemv(char trans, int m, int n, double alpha, double[am,an] a, int lda, double[xn] x, int incx, double beta, double[yn] y, int incy) | ismember(trans, ['n', 'N', 't', 'T', 'c', 'C']), m >= 0, n >=0, lda >= max(1,n), sgemvXdim(trans, m, n, incx, xn), incx != 0, sgemvYdim(trans, m, n, incy, yn), incy != 0
{
  if (trans == 'N' | trans == 'n') {
    lenx = n;
    leny = m;
  } else {
    lenx = m;
    leny = n;
    a = transpose(a);
  }

  betaY =   BlasLevel1::dscal(leny, beta, y, incy);
  alphaX =  {iv -> alpha * x[iv*incx]         | iv < [lenx]};
  resA =    {iv -> sum(a[iv] * alphaX)        | iv < [leny]};
  res =     {iv -> resA[iv/incy] +  betaY[iv] | iv <= [(leny-1)*incy] step [incy] ; iv -> y[iv]};

  return res;
}


double[m,n] dger(int m, int n, double alpha, double[lenx] x, int incx, double[leny] y, int incy, double[m,n] a, int lda)
{
  return {[i,j] -> a[i,j] + alpha * x[i*incx] * y[j*incy] | [i,j] < [m,n]};
}

double[*] dsbmv(char uplo, int n, int k, double alpha, double[*] a, int lda, double[*] x, int incx, double beta, double[*] y, int incy)
{
    betaY =   BlasLevel1::dscal(n, beta, y, incy);
    alphaX =  {iv -> alpha * x[iv*incx]         | iv < [n]};
    if (uplo == 'u' || uplo == 'U') {
        resA =    {iv -> sum((take(iv, transpose(a)[iv]) ++ drop(iv, a[iv])) * alphaX) | iv < [n]};
    } else {
        resA =    {iv -> sum((take(iv, a[iv]) ++ drop(iv, transpose(a)[iv])) * alphaX) | iv < [n]};
    }
    res =     {iv -> resA[iv/incy] +  betaY[iv] | iv <= [(n-1)*incy] step [incy] ; iv -> y[iv]};

    return res;
}

double[yn] dspmv(char uplo, int n, double alpha, double[.] ap, double[xn] x, int incx, double beta, double[yn] y, int incy)
{
    a = trttrs('u', ap, n);
    betaY =   BlasLevel1::dscal(n, beta, y, incy);
    alphaX =  {iv -> alpha * x[iv*incx]         | iv < [n]};
    if (uplo == 'u' || uplo == 'U') {
        resA =    {iv -> sum((take(iv, transpose(a)[iv]) ++ drop(iv, a[iv])) * alphaX) | iv < [n]};
    } else {
        resA =    {iv -> sum((take(iv, a[iv]) ++ drop(iv, transpose(a)[iv])) * alphaX) | iv < [n]};
    }
    res =     {iv -> resA[iv/incy] +  betaY[iv] | iv <= [(n-1)*incy] step [incy] ; iv -> y[iv]};

   return res;
}

double[apn] dspr(char uplo, int n, double alpha, double[xn] x, int incx, double[apn] ap)
{
    full = trttrs(uplo, ap, n);
    xMat = {[i,j] -> alpha * x[i*incx] * x[j*incx] | [i,j] < [n,n]};
    if (uplo == 'U' || uplo == 'u') {
        inter = {iv -> ((take(iv, transpose(full)[iv]) ++ drop(iv, full[iv])) + xMat[iv]) | iv < [n]};
    } else {
        inter = {iv -> ((take(iv, full[iv]) ++ drop(iv, transpose(full)[iv])) + xMat[iv]) | iv < [n]};
    }
    res = trttps(uplo, inter);
    return res;
}

double[apn] dspr2(char uplo, int n, double alpha, double[xn] x, int incx, double[yn] y, int incy, double[apn] ap)
{
    full = trttrs(uplo, ap, n);
    xMat = {[i,j] -> alpha * x[i*incx] * y[j*incy] | [i,j] < [n,n]};
    yMat = {[i,j] -> alpha * y[j*incy] * x[i*incx] | [i,j] < [n,n]};
    if (uplo == 'U' || uplo == 'u') {
        inter = {iv -> ((take(iv, transpose(full)[iv]) ++ drop(iv, full[iv])) + xMat[iv] + yMat[iv]) | iv < [n]};
    } else {
        inter = {iv -> ((take(iv, full[iv]) ++ drop(iv, transpose(full)[iv])) + xMat[iv] + yMat[iv]) | iv < [n]};
    }
    res = trttps(uplo, inter);
    return res;
}


double[leny] dsymv(char uplo, int n, double alpha, double[d:shp] a, int lda, double[lenx] x, int incx, double beta, double[leny] y, int incy) | ismember(uplo, ['u', 'U', 'l', 'L'])
{
    betaY =   BlasLevel1::dscal(n, beta, y, incy);
    alphaX =  {iv -> alpha * x[iv*incx]         | iv < [n]};
    if (uplo == 'u' || uplo == 'U') {
        resA =    {iv -> sum((take(iv, transpose(a)[iv]) ++ drop(iv, a[iv])) * alphaX) | iv < [n]};
    } else {
        resA =    {iv -> sum((take(iv, a[iv]) ++ drop(iv, transpose(a)[iv])) * alphaX) | iv < [n]};
    }
    res =     {iv -> resA[iv/incy] +  betaY[iv] | iv <= [(n-1)*incy] step [incy] ; iv -> y[iv]};

   return res;
}


double[am,an] dsyr(char uplo, int n, double alpha, double[*] x, int incx, double[am,an] a, int lda)
{
    xMat = {[i,j] -> alpha * x[i*incx] * x[j*incx] | [i,j] < [n,n]};
    if (uplo == 'U' || uplo == 'u') {
        res = {iv -> take(iv, a[iv]) ++ (drop(iv, a[iv]) + drop(iv, xMat[iv])) | iv < [n]};
    } else {
        res = {iv -> (take(iv+1, a[iv]) + take(iv+1, xMat[iv])) ++ drop(iv+1, a[iv]) | iv < [n]};
    }
    return res;
}


double[am,an] dsyr2(char uplo, int n, double alpha, double[*] x, int incx, double[*] y, int incy, double[am,an] a, int lda)
{
    xMat = {[i,j] -> alpha * x[i*incx] * y[j*incy] | [i,j] < [n,n]};
    yMat = {[i,j] -> alpha * y[i*incx] * x[j*incy] | [i,j] < [n,n]};
    if (uplo == 'U' || uplo == 'u') {
        res = {iv -> take(iv, a[iv]) ++ (drop(iv, a[iv]) + drop(iv, xMat[iv]) + drop(iv, yMat[iv])) | iv < [n]};
    } else {
        res = {iv -> (take(iv+1, a[iv]) + take(iv+1, xMat[iv]) + take(iv+1, yMat[iv])) ++ drop(iv+1, a[iv]) | iv < [n]};
    }
    return res;
}


// double[xn] dtbmv(char uplo, char trans, char diag, int n, int k, double[an,am] a, int lda, double[xn] x, int incx) | ismember(uplo, ['u', 'U', 'l', 'L']), ismember(trans, ['n', 'N', 't', 'T', 'c', 'C']), ismember(diag, ['u', 'U', 'n', 'N']), n >= 0,  incx != 0, lda > 0, lda >= k+1, k >= 0
// {
//   xt = { [iv] -> x[iv*incx] | [iv] < [n]};

//   if (trans != 'N' && trans != 'n') {
//     a = transpose(a);
//     if (uplo == 'U' || uplo == 'u') {
//       uplo = 'l';
//     } else {
//       uplo = 'u';
//     }
//   }

//   inter = [1.0d];

//   if ((uplo == 'U' || uplo == 'u') && (diag == 'N' || diag == 'n')) {
//     // upper
//     a = upperTriangleBandStorageToFull(a, k);
//     inter = { [iv] -> sum(drop([iv],a[iv]) * drop([iv],xt)) | [iv] < [n] };
//   } 

//   if ((uplo == 'U' || uplo == 'u') && (diag == 'U' || diag == 'u')) {
//     // upper unit
//     a = upperTriangleBandStorageToFull(a, k);
//     inter = { [iv] -> sum(drop([iv+1],a[iv]) * drop([iv+1],xt)) + xt[iv] | [iv] < [n] };
//   } 

//   if ((uplo == 'L' || uplo == 'l') && (diag == 'N' || diag == 'n')) {
//     // lower
//     a = lowerTriangleBandStorageToFull(a, k);
//     inter = { [iv] -> sum(take([iv+1],a[iv]) * take([iv+1],xt)) | [iv] < [n] };
//   } 
  
//   if ((uplo == 'L' || uplo == 'l') && (diag == 'U' || diag == 'u')) {
//     // lower unit
//     a = lowerTriangleBandStorageToFull(a, k);
//     inter = { [iv] -> sum(take([iv],a[iv]) * take([iv],xt)) + xt[iv]| [iv] < [n] };
//   } 


//   res = { [iv] -> inter[iv/incx] | [iv] <= [(xn-1)*incx] step [incx]; 
//           [iv] -> x[iv]};

//   return res;
// }

double[xn] dtbsv(char uplo, char trans, char diag, int n, int k, double[an,am] a, int lda, double[xn] x, int incx)// | ismember(uplo, ['u', 'U', 'l', 'L']), ismember(trans, ['n', 'N', 't', 'T', 'c', 'C']), ismember(diag, ['u', 'U', 'n', 'N']), n >= 0,  incx != 0, lda > 0, lda >= k+1, k >= 0
{
//   xt = { [iv] -> x[iv*incx] | [iv] < [n]};

//   if (trans != 'N' && trans != 'n') {
//     a = transpose(a);
//     if (uplo == 'U' || uplo == 'u') {
//       uplo = 'l';
//     } else {
//       uplo = 'u';
//     }
//   }

//   inter = [1.0d];

//   if ((uplo == 'U' || uplo == 'u') && (diag == 'N' || diag == 'n')) {
//     // upper
//     a = upperTriangleBandStorageToFull(a, k);
//     inter = { [iv] -> sum(drop([iv],a[iv]) * drop([iv],xt)) | [iv] < [n] };
//   } 

//   if ((uplo == 'U' || uplo == 'u') && (diag == 'U' || diag == 'u')) {
//     // upper unit
//     a = upperTriangleBandStorageToFull(a, k);
//     inter = { [iv] -> sum(drop([iv+1],a[iv]) * drop([iv+1],xt)) + xt[iv] | [iv] < [n] };
//   } 

//   if ((uplo == 'L' || uplo == 'l') && (diag == 'N' || diag == 'n')) {
//     // lower
//     a = lowerTriangleBandStorageToFull(a, k);
//     inter = { [iv] -> sum(take([iv+1],a[iv]) * take([iv+1],xt)) | [iv] < [n] };
//   } 
  
//   if ((uplo == 'L' || uplo == 'l') && (diag == 'U' || diag == 'u')) {
//     // lower unit
//     a = lowerTriangleBandStorageToFull(a, k);
//     inter = { [iv] -> sum(take([iv],a[iv]) * take([iv],xt)) + xt[iv]| [iv] < [n] };
//   } 


//   res = { [iv] -> inter[iv/incx] | [iv] <= [(xn-1)*incx] step [incx]; 
//           [iv] -> x[iv]};

  return x;
}

double[xn] dtpmv(char uplo, char trans, char diag, int n, double[an] ap, double[xn] x, int incx) | ismember(uplo, ['u', 'U', 'l', 'L']), ismember(trans, ['n', 'N', 't', 'T', 'c', 'C']), ismember(diag, ['u', 'U', 'n', 'N']), n >= 0, an >= n*(n+1)/2,  incx != 0
{
  xt = { [iv] -> x[iv*incx] | [iv] < [n]};
  res = { [iv] -> sum(take([n-iv],drop([idx(n, iv)], ap)) * drop([iv/incx], xt)) | [iv] <= [(xn-1)*incx] step [incx]; 
          [iv] -> x[iv]};

  return res;
}

double[xn] dtpsv(char uplo, char trans, char diag, int n, double[apn] ap, double[xn] x, int incx)// | ismember(uplo, ['u', 'U', 'l', 'L']), ismember(trans, ['n', 'N', 't', 'T', 'c', 'C']), ismember(diag, ['u', 'U', 'n', 'N']), n >= 0,  incx != 0, lda > 0, lda >= k+1, k >= 0
{
  xt = { [iv] -> x[iv*incx] | [iv] < [n]};

  if (uplo == 'U' || uplo == 'u') {
    a = trttrs('u', ap, n);
  } else {
    a = trttrs('l', ap, n);
  }

  if (trans != 'N' && trans != 'n') {
    a = transpose(a);
    if (uplo == 'U' || uplo == 'u') {
      uplo = 'l';
    } else {
      uplo = 'u';
    }
  } 

  if ((uplo == 'U' || uplo == 'u') && (diag == 'N' || diag == 'n')) {
    for (i = 0; i < xn; i++) {
      subtract = sum(take([-i], a[xn-1-i]) * take([-i], x));
      x[i] = (x[xn-1-i]-subtract) / a[n-1-i][n-1-i];
    } 
  } 

  if ((uplo == 'U' || uplo == 'u') && (diag == 'U' || diag == 'u')) {
    for (i = 0; i < xn; i++) {
      subtract = sum(take([-i], a[xn-1-i]) * take([-i], x));
      x[i] = (x[xn-1-i]-subtract);
    } 
  } 

  if ((uplo == 'L' || uplo == 'l') && (diag == 'N' || diag == 'n')) { 
    for (i = 0; i < xn; i++) {
      subtract = sum(take([i], a[i]) * take([i], x));
      x[i] = (x[i]-subtract) / a[i][i];
    } 
  } 
  
  if ((uplo == 'L' || uplo == 'l') && (diag == 'U' || diag == 'u')) {
    for (i = 0; i < xn; i++) {
      subtract = sum(take([i], a[i]) * take([i], x));
      x[i] = (x[i]-subtract);
    } 
  } 

  return x;
}


double[xn] dtrmv(char uplo, char trans, char diag, int n, double[an,am] a, int lda, double[xn] x, int incx) | ismember(uplo, ['u', 'U', 'l', 'L']), ismember(trans, ['n', 'N', 't', 'T', 'c', 'C']), ismember(diag, ['u', 'U', 'n', 'N']), n >= 0,  incx != 0, lda >= max(1,n)
{
  xt = { [iv] -> x[iv*incx] | [iv] < [n]};

  if (trans != 'N' && trans != 'n') {
    a = transpose(a);
    if (uplo == 'U' || uplo == 'u') {
      uplo = 'l';
    } else {
      uplo = 'u';
    }
  }

  inter = [1.0d];

  if ((uplo == 'U' || uplo == 'u') && (diag == 'N' || diag == 'n')) {
    // upper
    inter = { [iv] -> sum(drop([iv],a[iv]) * drop([iv],xt)) | [iv] < [n] };
  } 

  if ((uplo == 'U' || uplo == 'u') && (diag == 'U' || diag == 'u')) {
    // upper unit
    inter = { [iv] -> sum(drop([iv+1],a[iv]) * drop([iv+1],xt)) + xt[iv] | [iv] < [n] };
  } 

  if ((uplo == 'L' || uplo == 'l') && (diag == 'N' || diag == 'n')) {
    // lower
    inter = { [iv] -> sum(take([iv+1],a[iv]) * take([iv+1],xt)) | [iv] < [n] };
  } 
  
  if ((uplo == 'L' || uplo == 'l') && (diag == 'U' || diag == 'u')) {
    // lower unit
    inter = { [iv] -> sum(take([iv],a[iv]) * take([iv],xt)) + xt[iv]| [iv] < [n] };
  } 

  res = { [iv] -> inter[iv/incx] | [iv] <= [(xn-1)*incx] step [incx]; 
          [iv] -> x[iv]};

  return res;
}


double[xn] dtrsv(char uplo, char trans, char diag, int n, double[an,am] a, int lda, double[xn] x, int incx)// | ismember(uplo, ['u', 'U', 'l', 'L']), ismember(trans, ['n', 'N', 't', 'T', 'c', 'C']), ismember(diag, ['u', 'U', 'n', 'N']), n >= 0,  incx != 0, lda > 0, lda >= k+1, k >= 0
{
  xt = { [iv] -> x[iv*incx] | [iv] < [n]};

  if (trans != 'N' && trans != 'n') {
    a = transpose(a);
    if (uplo == 'U' || uplo == 'u') {
      uplo = 'l';
    } else {
      uplo = 'u';
    }
  }

  if ((uplo == 'U' || uplo == 'u') && (diag == 'N' || diag == 'n')) {
    for (i = 0; i < xn; i++) {
      subtract = sum(take([-i], a[xn-1-i]) * take([-i], x));
      x[i] = (x[xn-1-i]-subtract) / a[an-1-i][am-1-i];
    } 
  } 

  if ((uplo == 'U' || uplo == 'u') && (diag == 'U' || diag == 'u')) {
    for (i = 0; i < xn; i++) {
      subtract = sum(take([-i], a[xn-1-i]) * take([-i], x));
      x[i] = (x[xn-1-i]-subtract);
    } 
  } 

  if ((uplo == 'L' || uplo == 'l') && (diag == 'N' || diag == 'n')) { 
    for (i = 0; i < xn; i++) {
      subtract = sum(take([i], a[i]) * take([i], x));
      x[i] = (x[i]-subtract) / a[i][i];
    } 
  } 
  
  if ((uplo == 'L' || uplo == 'l') && (diag == 'U' || diag == 'u')) {
    for (i = 0; i < xn; i++) {
      subtract = sum(take([i], a[i]) * take([i], x));
      x[i] = (x[i]-subtract);
    } 
  } 

  return x;
}