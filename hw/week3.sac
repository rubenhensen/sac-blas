use Array: all;
use StdIO: all;

int main() 
{
    a = reshape([2,3,4], iota(24));
    // b = [2,3,4];
    // print(b[0]);
    // print( a );
    // print( transpose(a) );
    // print( vsum1(a) );
    // print( vsum2(a) );
    // print( vsum1t(a) );
    // print( vsum1( [1,2,3,4,5,6,7,8]) );
    // print( vsum2( [1,2,3,4,5,6,7,8]) );
    // print( vsum(42) ); // should error

    print( rsum (1, a) );
    print( rsum (2, a) );
    print( rsum (1, [1,2,3,4,5,6,7,8]) );
    // print( rsum (1, 42) );


    return 0;
}

int[d:shp] vsum1(int[n,d:shp] a) 
{
    b = with {
        ([0] <= iv < [n]): a[iv];
    }: fold (+, 0);
    return b;
}

int[d:shp] vsum2(int[n,d:shp] a) 
{
    t = transpose(a);
    r = reverse(shp);
    b = {iv -> sum(t[iv]) | iv < r};
    if (dim(b) == 0) {
        c = b;
    } else {
        c = transpose(b);
    }
    return c;
}

double[d:shp] vsum2(int[n,d:shp] a) 
{
    return { iv  -> sum({jv -> a[jv][iv] | jv < [n]}) | iv < shp};
}

int[m:ishp] rsum( int n, int[n:oshp, m:ishp] a)
{
    b = with {
        (oshp*0 <= iv < oshp): a[iv];
    }: fold (+, 0);
    return b;
}

int[*] vsum1t(int[n,d:shp] a) 
{
    return {iv -> a[iv] | iv < [n]};
}