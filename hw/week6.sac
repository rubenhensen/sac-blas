// Task 1: Code Specialisation
// Describe the potential and the difficulties of code specialisation. Give examples /
// describe application scenarios for all pros and challenges you explain.

// We want to write generalized code. But we also want specialized versions
// of this generalized code to effectively optimize the code during code generation.
// 
// The difficulty lies in the problem that we cannot specialize every function for every value. 
// This would result in infinite code generation. We thus want to know which functions need which specializations, 
// without getting stuck in code generation (non-termination).

// A function foo like this:
int[*] foo(int[*] a)
{
    return {iv -> a[iv] * 2}
}
// Could be specialized to:
int{12} foo(int{6} a)
{
    return 12;
}
// with the use of things like constant folding probably. But if we only know that a is an natural number,
// we cannot generate all specialization int{0} foo(int{0} a), int{2} foo(int{1} a), int{6} foo(int{3} a), etc.
// Therein lies the problem. We want to specialize as much as possible, but we cannot specialize all use cases,
// thus we need to decide which functions get which specialization.




// Task 2: Code Optimisation
// Constant folding. 
// If an expression contains constant values, or variables with constant variables.
// We can calculate these expressions beforehand.

void foo() {
    x = 7 + 3;
    y = 9;
    z = x * y;
}

void foo() {
    x = 10;
    y = 9;
    z = 90;
}


// Structural-constant Constant folding. 
// Also precalculating constants, but this time constants in structures such as arrays.
// This could be lookups in arrays or concatenation of arrays for example

void foo() {
    x = iota(10);
    a = x[[5]];
}

void foo() {
    x = iota(10);
    a = 4;
}

// With loop folding
// With loop is a sac specific optimization based on the (map f) . (map g) == map (f . g)
// We can combine 2 consecutive with loops this way, saving on execution time.

void bar() {
    a = iota(10);
    a = with { 
        ([0] <= iv < [10]) : a*42;
    }: genarray([10],0);

    a = with { 
        ([0] <= iv < [10]) : a/2;
    }: genarray([10],0);
}

void bar() {
    a = iota(10);
    a = with { 
        ([0] <= iv < [10]) : (a*42)/2;
    }: genarray([10],0);
}

// Symbolic constant simplification is much like constant folding, however it works on symbolic constraints instead
// of numerical constraints.
void foobar() {
    x = 'a';
    if (x == x) {
        // something
    } else {
        // something else
    }
}

void foobar() {
    // something
}

// Task 3: Concurrency Pattern
See picture matmul3322, and matmul22

// Task4: Concurrency
The problem would just be too many fork/joins. With loop scalarizations could probably help, eliminating the inside with-loop
form matmul[2,2] and from matmul[3,3,2,2], (or in this case matmul[20,20] and matmul[30,30,20,20]).






















// x = 2/0
// if (x = x) {
//     do something
// }

// This could be interpreted in 2 ways. The program should crash, because we
// can't divide by zero. Or x = x will be replaced by true, because it is equivalent
// and x will be removed because it is never used.