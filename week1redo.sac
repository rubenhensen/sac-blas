use Array: all;
use StdIO: all;

int main() {
  // 1.1 myGenarray
    print("\n##### 1.1 myGenarray #####");
    // print(genarray ([-2], 42));
    // print(myGenarray([-2], 42));
    // print(eq(genarray ([-2], 42),myGenarray ([-2], 42)));

    print(genarray ([2], 42));
    print(myGenarray ([2], 42));
    print(eq(genarray ([2], 42),myGenarray ([2], 42)));

    print(genarray ([2], [1,2,3]));
    print(myGenarray ([2], [1,2,3]));
    print(eq(genarray ([2], [1,2,3]), myGenarray ([2], [1,2,3])));

    print(myGenarray ([2,2], [1,2,3,4]));
    print(myGenarray ([2,2], [1,2,3,4]));
    print(eq(genarray ([2,2], [1,2,3,4]), myGenarray ([2,2], [1,2,3,4])));

    print(myGenarray ([], [1,2,3,4]));
    print(genarray ([], [1,2,3,4]));
    print(eq(genarray ([], [1,2,3,4]), myGenarray ([], [1,2,3,4])));
    // print(myGenarray ([3,3], [[1,2],[3,4]]));

    // 1.2 genarrayI
    print("\n##### 1.2 genarrayI #####");
    print(genarrayI ([2], 42));
    print([42,42]);
    print(eq(genarrayI ([2], 42), [42,42]));

    print(genarrayI ([2], [1,2,3]));
    print([[1,1],[2,2],[3,3]]);
    print(eq(genarrayI ([2], [1,2,3]), [[1,1],[2,2],[3,3]]));

    print(genarrayI ([2,2], [1,2,3,4]));
    print([[[1,1],[1,1]],[[2,2],[2,2]],[[3,3],[3,3]],[[4,4],[4,4]]]);
    print(eq(genarrayI ([2,2], [1,2,3,4]), [[[1,1],[1,1]],[[2,2],[2,2]],[[3,3],[3,3]],[[4,4],[4,4]]]));
    
    print(genarrayI ([], [1,2,3,4]));
    print([1,2,3,4]);
    print(eq(genarrayI ([], [1,2,3,4]), [1,2,3,4]));
    

    // 1.3 myTake1
    print("\n##### 1.3 myTake1 #####");
    print( myTake1 ([1], [21,42]) );
    print( [21] );
    print( eq(myTake1 ([1], [21,42]), [21]) );

    print( myTake1 ([2,3], reshape ([10,5], iota(50))) );
    print( [[0,1,2], [5,6,7]] );
    print( eq(myTake1 ([2,3], reshape ([10,5], iota(50))), [[0,1,2], [5,6,7]]));

    print( myTake1 ([1], reshape ([10,5], iota(50))) );
    print( [[0,1,2,3,4]] );
    // print( take([1], reshape ([10,5], iota(50)) ));
    print( eq(myTake1 ([1], reshape ([10,5], iota(50))), [[0,1,2,3,4]]) );

    print( myTake1 ([], reshape ([10,5], iota(50))) );
    print( reshape ([10,5], iota(50)) );
    print( eq(myTake1 ([], reshape ([10,5], iota(50))), reshape ([10,5], iota(50))) );

    print( myTake1 ([0], reshape ([10,5], iota(50))) );
    print( reshape([0,5], []) );
    print( eq(myTake1 ([0], reshape ([10,5], iota(50))), reshape([0,5], [])) );


    // print( [] <= [1,2,3] && (all(shp <= shp2) || shp == []));
    // print(all([] == []));

    print( myTake2 ([2], [1]) );
    print( myTake2 ([11,6], reshape ([10,5], iota(50))) );

    print( myTake3 ([3,3,4], [[1,2],[3,4],[5,6]]) );

    // a = reshape([3,3], iota(9));
    // b = take([2,2],a);
    // print(a);
    // print(b);
    // print(a==b);
    // print(eq(a,b));

    print([1,2] < [3,8]);

    return 0;
}

int[d:shp, v:vshp] myGenarray(int[d] shp, int[v:vshp] data) | all(shp >=0)
{
    return {iv -> data | iv < shp};
}

int[v:vshp, d:shp] genarrayI(int[d] shp, int[v:vshp] data) | all(shp >=0)
{
    return {iv -> myGenarray(shp, data[iv]) | iv < vshp};
}

int[d:shp, i:inner] myTake1(int[d] shp, int[o:outer, i:inner] data) | all(shp < outer)
{
    return {iv -> data[iv] | iv < shp};
}

int[d:shp, i:inner] myTake2(int[d] shp, int[o:outer, i:inner] data) | all(shp < outer)
{
    return {iv -> data[iv]   | iv < outer;
            iv -> data[iv]*0 | iv < shp};
}

int[d:shp, i:inner] myTake3(int[d] shp, int[o:outer, i:inner] data) | all(shp < outer)
{
    if(d1 > d2) {
        diff = d1 - d2;
        diffarr = genarray([diff], 1);
        newshp = shp2 ++ diffarr;
        data = reshape(newshp, data);
    }
    
    return {iv -> data[iv]   | iv < outer;
            iv -> data[iv]*0 | iv < shp};
}

bool eq (int[d1:shp1] a, int[d2:shp2] b) {
    return all(a == b) && all(shp1==shp2) && all(d1==d2);
}
