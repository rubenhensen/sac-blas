#define BILLION 1000000000

int foo()
{
    a = genarray([BILLION],0);
    b = modarray(a, [0], 1);
    c = modarray(a, [0], 99);
    res = b[0] + c[0];
    return res;
}

// Assuming line 6 should be closed with a semicolon

#define BILLION 1000000000

int foo()
{
    // a = genarray([BILLION],0);
    ALLOC_INT(BILLION, a);
    INC_RC(a, 1);
    REUSE_OR_ALLOC_AND_COPY(a, b);
    b[0] = 1;
    DEC_RC_FREE(a);
    REUSE_OR_ALLOC_AND_COPY(a, c);
    c[0] = 99;
    DEC_RC_FREE(a);
    res = b[0] + c[0];
    DEC_RC_FREE(b);
    DEC_RC_FREE(c);
    return res;
}

4 billion bytes are allocated and put on the heap.
At the first modarray the refcounter for a is 2. 
So the array is copied and gets its own refcounter. 
We now have 8 billion bytes on the array.
The second modarray reuses the allocation from a, so no new memory is used.
When b and c are freed, both 4 billion bytes are freed from the heap.

A delayed garbage collector with 9gb would run into memory problems, and puts 3gb on the swap. It will free as soon as possible because there is this space shortage.
A delayed garbage collector with 13gb would use 12gb. And only free them when there is a space shortage
