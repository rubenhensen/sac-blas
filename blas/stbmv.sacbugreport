/**********************************************************************
 *
 * SAC bug report: stbmv.sacbugreport
 *
 **********************************************************************
 *
 * Automatically generated on Wed Apr 17 02:21:32 PM CEST 2024
 *
 * using sac2c 1.3.3-MijasCosta-1187-gd6b95
 * built 2024-04-06T22:46:02.
 * by user rubenhensen on host pop-os.
 *
 * The compiler was called by
 *  sac2c -check tc -o test/stbmv.out test/stbmv.sac
 *
 * The compiler crashed in
 *  phase: opt (Running SAC optimizations)
 *  sub phase: saacyc (Symbolic array attribute cycle 2)
 *  cycle phase: wlprop (Applying with-loop propagation)
 *  cycle instance: 2
 *
 * What follows is the contents of test/stbmv.sac.
 *
 **********************************************************************/

use StdIO: all;
use Array: all;
use BlasLevel1: all;
// use BlasLevel2: all;
// use Helper: all;

int main() {
  // // lower
  // a = reshape([4,4],tof([1,0,0,0,2,3,0,0,4,5,6,0,7,8,9,10]));
  // print(a);
  // compare('l','n','n', 4, 2, a, 4, tof(iota(4)+1), 1);
  // char uplo, char trans, char diag, int n, int k, float[an,am] a, int lda, float[xn] x, int incx)

  // // upper band
  // a = reshape([2,2],tof([1,2,0,3]));
  // print(a);
  // a = fullUpperTriangleStorageToBand(a,1);
  // print(a);
  // compare('u','n','n', 2, 1, a, 2, tof(iota(2)+1), 1);

  // upper band
  a = reshape([7,7],tof([1,1,1,1,0,0,0,0,2,2,2,2,0,0,0,0,3,3,3,3,0,0,0,0,4,4,4,4,0,0,0,0,5,5,5,0,0,0,0,0,6,6,0,0,0,0,0,0,7]));
  print(a);
  a = fullUpperTriangleStorageToBand(a,3);
  print(a);
  a = {[i] -> a[i] | [i] < take([1],shape(a));
       [i] -> tof([0,0,0,0,0,0,0]) | [i] < take([1],shape(a))+1};
  print(a);
  // compare('u','n','n', 2, 1, a, 2, tof(iota(2)+1), 1);


  // // upper band
  // a = reshape([4,4],tof([1,2,0,0,0,3,4,0,0,0,5,6,0,0,0,7]));
  // a = fullUpperTriangleStorageToBand(a,1);
  // print(a);
  // compare('u','n','n', 4, 1, a, 2, tof(iota(4)+1), 1);

  // // lower band
  // a = reshape([4,4],tof([1,0,0,0,2,3,0,0,4,5,6,0,7,8,9,10]));
  // compare('l','n','u', 4, a, 4, tof(iota(4)+1), 1);


  // // upper T
  // a = reshape([4,4],tof([1,2,3,4,0,5,6,7,0,0,8,9,0,0,0,10]));
  // compare('u','t','n', 4, a, 4, tof(iota(4)+1), 1);

  // a = reshape([3,3],tof([1,2,3,0,4,5,0,0,6]));
  // compare('u','t','n', 3, a, 3, tof(iota(3)+1), 1);

  // // lower T
  // a = reshape([4,4],tof([1,0,0,0,2,3,0,0,4,5,6,0,7,8,9,10]));
  // compare('l','t','n', 4, a, 4, tof(iota(4)+1), 1);

  // // upper band T
  // a = reshape([4,4],tof([1,2,3,4,0,5,6,7,0,0,8,9,0,0,0,10]));
  // compare('u','t','u', 4, a, 4, tof(iota(4)+1), 1);

  // // lower band T
  // a = reshape([4,4],tof([1,0,0,0,2,3,0,0,4,5,6,0,7,8,9,10]));
  // compare('l','t','u', 4, a, 4, tof(iota(4)+1), 1);

  return 0;
}

float[n,n] storageUpperTriangleStorageToFull(float[m,n] storage, int k)
{
  a = transpose(storage);
  a = {iv -> padVectorBack(1+k,drop([max(0,k-iv[0])],a[iv])) | iv < [n]};
  a = {iv -> padVectorOffset(n, max(0,iv[0]-(k)), a[iv]) | iv < [n]};
  a = transpose(a);
  return a;
}

bool eq (float[d1:shp1] a, float[d2:shp2] b) {
    return all(a == b) && all(shp1==shp2) && all(d1==d2);
}

// float[am,n] 
float[*] fullUpperTriangleStorageToBand(float[m,n] full, int k) //| (n-k-1 == am)
{
  a = transpose(full);
  a = {iv -> take([1+k],drop(max([0],iv-[k]),a[iv])) | iv < [n]};
  a = {iv -> padVectorFront(1+k,take(min([1+k],iv+1),a[iv])) | iv < [n]};
  a = transpose(a);
  return a;
}

void compare(char uplo, char trans, char diag, int n, int k, float[an,am] a, int lda, float[xn] x, int incx)
{
    y1 = OpenBlas::stbmv(uplo, trans, diag, n, k, a, lda,  x, incx);
    y2 = stbmv(uplo, trans, diag, n, k, a, lda, x, incx);

    if(!(eq(y1,y2)))
    {
        printf("Error in stbmv. uplo:%c, trans:%c, diag:%c, n:%d, k:%d, lda:%d, incx:%d\n", uplo, trans, diag, n, k, lda, incx); 
        print(a);
        print(x);
        print(y1);
        print(y2);
        printf("\n");
    }
}

float[xn] stbmv(char uplo, char trans, char diag, int n, int k, float[an,am] a, int lda, float[xn] x, int incx) | ismember(uplo, ['u', 'U', 'l', 'L']), ismember(trans, ['n', 'N', 't', 'T', 'c', 'C']), ismember(diag, ['u', 'U', 'n', 'N']), n >= 0,  incx != 0, lda > 0, lda >= k+1, k >= 0
{
  xt = { [iv] -> x[iv*incx] | [iv] < [n]};

  if (trans != 'N' && trans != 'n') {
    a = transpose(a);
    if (uplo == 'U' || uplo == 'u') {
      uplo = 'l';
    } else {
      uplo = 'u';
    }
  }

  inter = [1.0f];

  if ((uplo == 'U' || uplo == 'u') && (diag == 'N' || diag == 'n')) {
    // upper
    a = storageUpperTriangleStorageToFull(a, k);
    print(a);
    inter = { [iv] -> sum(drop([iv],a[iv]) * drop([iv],xt)) | [iv] < [n] };
    print(inter);
  } 

  if ((uplo == 'U' || uplo == 'u') && (diag == 'U' || diag == 'u')) {
    // upper unit
    a = storageUpperTriangleStorageToFull(a, k);
    inter = { [iv] -> sum(drop([iv+1],a[iv]) * drop([iv+1],xt)) + xt[iv] | [iv] < [n] };
  } 

  if ((uplo == 'L' || uplo == 'l') && (diag == 'N' || diag == 'n')) {
    // lower
    a = storageUpperTriangleStorageToFull(a, k);
    inter = { [iv] -> sum(take([iv+1],a[iv]) * take([iv+1],xt)) | [iv] < [n] };
  } 
  
  if ((uplo == 'L' || uplo == 'l') && (diag == 'U' || diag == 'u')) {
    // lower unit
    a = storageUpperTriangleStorageToFull(a, k);
    inter = { [iv] -> sum(take([iv],a[iv]) * take([iv],xt)) + xt[iv]| [iv] < [n] };
  } 


  res = { [iv] -> inter[iv/incx] | [iv] <= [(xn-1)*incx] step [incx]; 
          [iv] -> x[iv]};

  return res;
}

float[m] padVectorFront(int k, float[n] arr)
{
  zeros = [k-n];
  return { iv -> 0.0f           | iv < zeros;
           iv -> arr[iv-zeros]  | zeros <= iv < [k]
         };
}

// inline
float[m] padVectorBack(int k, float[n] arr) | (k >= n)
{
  return { iv -> arr[iv]  | iv < [n];
           iv -> 0.0f     | [n] <= iv < [k]       
         };
}

float[m] padVectorOffset(int m, int offset, float[n] arr) | (offset >= 0)
{
  return { iv -> 0.0f             | iv < [offset];  
           iv -> arr[iv-offset]   | [offset] <= iv < [n+offset];
           iv -> 0.0f             | [offset+n] <= iv < [m]       
         };
}

bool ismember(char c, char[n] ca)
{
  b = false;
  for(i=0; i<n;i++) {
    if (ca[i] == c) b = true;
  }
  return b;
}

/**********************************************************************
 *
 * End of bug report
 *
 **********************************************************************/

