// When an assignment is done, you must decrease the reference counter

// you can infer the references of a variable within the body first by counting
// the idea is to keep track of references in order to delete the data as soon as possible

// *** Task 1, Task 2 *** //
# define BILLION 1000000000
int foo (int[n] a)
{
    // ALLOC_INT(n, a);
    // INC_RC(a, 2)
    b = modarray (a, [0], a[0] + 1); // RC(a) == 3
    // ALLOC_INT(SIZE(a), b);
    // DEC_RC(a, 2); 
    c = modarray (b, [1], a[1] + 42); // RC(a) == 1; RC(b) == 1;
    // ALLOC_INT(SIZE(b), c);
    // DEC_RC(a, 1);
    // DEC_RC(b, 1);
    // INC_RC(c, 1);

    res = c[1] + c[2]; // RC(a) == 0; RC(b) == 0; RC(c) == 2
    // DEC_RC(c, 2);
    return res; // RC(c) == 0;
}

int bar (int[n] a)
{
    // ALLOC_INT(n, a);
    // INC_RC(a, 1);
    if (foo(a) == 44) { // RC(a) == 2
        // DEC_RC(a, 1);
        res = a [22]; // RC(a) == 1
        // DEC_RC(a, 1);
    } else {
        res = a [2] + a [14]; // RC(a) == 2
        // DEC_RC(a, 2);
    }

    return res; // RC(a) == 0
}

int main () {
    a = genarray ([BILLION], 0);
    x = bar(a); // RC(a) == 1
    // DEC_RC(a, 1);
    return x; // RC(a) == 0
}

// *** Task 3, Task 2 *** //
# define BILLION 1000000000
int foo (int[n] a)
{
    /*
    b = modarray (a, [0], a[0] + 1);
    c = modarray (b, [1], a[1] + 42);
    res = c [1] + c [2];
    */

    // ALLOC_INT(n, a);
    // INC_RC(a, 1); 
    res = (a[1]+42) + a[2]; // RC(a) == 2;
    // DEC_RC(a, 2);
    return res ; // RC(a) == 0;
}

// Same result for bar and main functions

// *** Task 4 *** //
// If you get rid of all the increments, you would have a negative reference count due to all the decrements
// You would also not be counting the usages any more