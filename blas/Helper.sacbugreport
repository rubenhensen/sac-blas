/**********************************************************************
 *
 * SAC bug report: Helper.sacbugreport
 *
 **********************************************************************
 *
 * Automatically generated on Wed Mar 27 04:16:22 PM CET 2024
 *
 * using sac2c 1.3.3-MijasCosta-1165-g41c84
 * built 2024-02-23T21:16:58.
 * by user  on host runner-qipqeg7c-project-39-concurrent-3.
 *
 * The compiler was called by
 *  sac2c -check tc Helper.sac
 *
 * The compiler crashed in
 *  phase: opt (Running SAC optimizations)
 *  sub phase: saacyc (Symbolic array attribute cycle 2)
 *  cycle phase: wlprop (Applying with-loop propagation)
 *  cycle instance: 2
 *
 * What follows is the contents of Helper.sac.
 *
 **********************************************************************/

module Helper;

use StdIO: all;
use Math: all;
use Structures: all;

export all;


// bool eq (int[d1:shp1] a, int[d2:shp2] b) {
//     return all(a == b) && all(shp1==shp2) && all(d1==d2);
// }

bool eq (float[d1:shp1] a, float[d2:shp2] b) {
    return all(a == b) && all(shp1==shp2) && all(d1==d2);
}

bool eq (complex[d1:shp1] a, complex[d2:shp2] b) {
    return all(a == b) && all(shp1==shp2) && all(d1==d2);
}

// bool eq (float[*] a, float[*] b) {
//     return all(a == b);
// }

// bool eq (complex[*] a, complex[*] b) {
//     return all(a == b); //&& all(shp1==shp2) && all(d1==d2);
// }

// bool eq (complex[d1:shp1] a, complex[d2:shp2] b) {
//     return all(a == b) && all(shp1==shp2) && all(d1==d2);
// }


bool almost_eq (float[d1:shp1] a, float[d2:shp2] b) {
    MAX_ACC_LOSS = 0.0001f;

    return all(abs(a - b) < MAX_ACC_LOSS) && all(shp1==shp2) && all(d1==d2);
}

bool ismember(char c, char[n] ca)
{
  b = false;
  for(i=0; i<n;i++) {
    if (ca[i] == c) b = true;
  }
  return b;
}

bool ismember(float c, float[n] ca)
{
  b = false;
  for(i=0; i<n;i++) {
    if (ca[i] == c) b = true;
  }
  return b;
}

bool ismember(int c, int[n] ca)
{
  b = false;
  for(i=0; i<n;i++) {
    if (ca[i] == c) b = true;
  }
  return b;
}

bool ismember(double c, double[n] ca)
{
  b = false;
  for(i=0; i<n;i++) {
    if (ca[i] == c) b = true;
  }
  return b;
}

bool minArrLen(int n, int arrLength, int inc)
{
    return arrLength  > (n-1)*inc;
}

/**********************************************************************
 *
 * End of bug report
 *
 **********************************************************************/

