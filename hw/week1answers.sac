use StdIO: all;
use Array: all;

// use sac2c -check t ./file
// Next time do -check tc :) -check c adds checking for type patterns
// (Feedback given from bottom to top)
int main() {
    // a = reshape([5,3], iota (15));
    // b = take([2], a);
    // c = drop([2], a);
    // x,y = takedrop ([2], a);
    // print("a");
    // print(a);
    // print("\ntake");
    // print(b);
    // print("\ndrop");
    // print(c);
    // print("\ntake of takedrop");
    // print(x);
    // print("\ndrop of takedrop");
    // print(y);
    // print("\ntod (to double)");
    // d = tod(a);
    // print(d);
    // print(shape(shape([])));
    // print([1,2,3] [3]);
    // print([[]] [4]);
    // print(reshape([2,3,4], iota(24)) + [[[1]]]);
    // print(reshape([2,3,4], iota(24)) + 1);


    // print(recip ([2.0,0.0,3.0]));


    // Questions
    // Why does below reshape function not work
    // What domain restrictions are there except all x >= 0?
    // Typo in exercise 1.3 "Eexample"


    // print(reshape ([1], 42));
    // print(myReshape ([1], 42)); // WERKT NIET??
    // Error messages seem incorrect still.
    // What are conformity checks?
    // runtime type errors?



    // print(plus(3,4));


    // 1.1 myGenarray
    // print("\n##### 1.1 myGenarray #####");
    // print(genarray ([-2], 42));
    // print(myGenarray([-2], 42));
    // print(genarray ([2], 42));
    // print(myGenarray ([2], 42));
    // print(all(genarray ([2], 42) == myGenarray ([2], 42)));

    // print(genarray ([2], [1,2,3]));
    // print(myGenarray ([2], [1,2,3]));
    // print(all(genarray ([2], [1,2,3]) == myGenarray ([2], [1,2,3])));

    // print(myGenarray ([2,2], [1,2,3,4]));
    // print(myGenarray ([2,2], [1,2,3,4]));
    // print(all(genarray ([2,2], [1,2,3,4]) == myGenarray ([2,2], [1,2,3,4])));

    // print(myGenarray ([], [1,2,3,4]));
    // print(genarray ([], [1,2,3,4]));
    // print(all(genarray ([], [1,2,3,4]) == myGenarray ([], [1,2,3,4])));


    // 1.2 genarrayI
    // print("\n##### 1.2 genarrayI #####");
    // print(genarrayI ([2], 42));
    // print(all(genarrayI ([2], 42) == [42,42]));

    // print(genarrayI ([2], [1,2,3]));
    // print([[1,1],[2,2],[3,3]]);
    // print(all(genarrayI ([2], [1,2,3]) == [[1,1],[2,2],[3,3]]));

    // print(genarrayI ([2,2], [1,2,3,4]));
    // print([[[1,1],[1,1]],[[2,2],[2,2]],[[3,3],[3,3]],[[4,4],[4,4]]]);
    // print(all(genarrayI ([2,2], [1,2,3,4]) == [[[1,1],[1,1]],[[2,2],[2,2]],[[3,3],[3,3]],[[4,4],[4,4]]]));

    // print(genarrayI ([], [1,2,3,4]));
    // print([1,2,3,4]);
    // print(all(genarrayI ([], [1,2,3,4]) == [1,2,3,4]));


    // 1.3 myTake1
    // print("\n##### 1.3 myTake1 #####");
    // print( myTake1 ([1], [21,42]) );
    // print( [21] );
    // print( all(myTake1 ([1], [21,42]) == [21]) );

    // print( myTake1 ([2,3], reshape ([10,5], iota(50))) );
    // print( [[0,1,2], [5,6,7]] );
    // print( all(myTake1 ([2,3], reshape ([10,5], iota(50))) == [[0,1,2], [5,6,7]]));

    // print( myTake1 ([1], reshape ([10,5], iota(50))) );
    // print( [[0,1,2,3,4]] );
    // // print( take([1], reshape ([10,5], iota(50)) ));
    // print( all(myTake1 ([1], reshape ([10,5], iota(50))) == [[0,1,2,3,4]]) );

    // print( myTake1 ([], reshape ([10,5], iota(50))) );
    // print( reshape ([10,5], iota(50)) );
    // print( all(myTake1 ([], reshape ([10,5], iota(50))) == reshape ([10,5], iota(50))) );

    // print( myTake1 ([0], reshape ([10,5], iota(50))) );
    // print( reshape([0,5], []) );
    // print( all(myTake1 ([0], reshape ([10,5], iota(50))) == reshape([0,5], [])) );

    // print( [] <= [1,2,3] && (all(shp <= shp2) || shp == []));
    // print(all([] == []));

    // print( myTake2 ([2], [1]) );
    // print( myTake2 ([11,6], reshape ([10,5], iota(50))) );

    // print( myTake3 ([3,3,4], [[1,2],[3,4],[5,6]]) );
    // print (myTake3())
    return 0;
}

int[*] myTake3 (int[d1] shp, int[d2:shp2] data)
{
    // Or just: d1 > d2 :)
    // If d1 > d2, then indeed do something custom
    // (There was no single correct answer there, there are multiple correct results)
    // But in the other case you could have reused myTake2
    if(d1 - d2 > 0) {
        diff = d1 - d2;
        diffarr = genarray([diff], 1);
        newshp = shp2 ++ diffarr;
        data = reshape(newshp, data);
    }
    // Same problems in this tensor comprehension as in myTake2
    return {iv -> data[iv] | iv < shape(data);
            iv -> 0 | iv < shp};
}

int[*] myTake2 (int[d1:shp1] shp, int[d2:shp2] data) | shp1[0] <= d2
{
    // Getting there with the multiple-partition tensor comprehension, although not fully correct yet
    // In the first case, you want to take only the first shp elements, however with iv < shape(data) you take all
    // Instead you should have taken the minimum of shp and the outer shape of data
    return {iv -> data[iv] | iv < shape(data);
            // All partitions must return a value of the same shape, but data[iv] may return an array
            // Here then you cannot return 0, but should instead return an array of zeros with the same shape instead
            iv -> 0 | iv < shp};
}
//int[d:shp,i:inner]
//myTake2 (int[d] shp, int[d:outer,i:inner] arr)
//    | all (shp >= 0)
//{
//    return { iv -> arr[iv]             | iv < min (shp, outer);
//             iv -> genarray (inner, 0) | iv < shp };
//}

// int[d1:shp1] is an array of dimensionality d1 (int[*]) however shp is always a vector (int[.])
// So instead you should have written something like 'int[n] shp', in which case 'n' is the length of this shape vector
//     int[d:shp,i:inner] myTake1 (int[d] shp, int[d:outer,i:inner] arr)
int[*] myTake1 (int[d1:shp1] shp, int[d2:shp2] data) | shp1[0] <= d2
        // This won't work, shp may be shorter than the shape of data (eg myTake1 ([1], [[1,1],[2,2]]) )
        // In which case you get all ([1] < [2,2]), which won't work because the two vectors are not of the same length
        && (all(shp == []) || all(shp < shp2))
{
    // This is correct
    return {iv -> data[iv] | iv < shp};
}

// Good job reusing myGenarray.
// Here you DO indeed correctly ensure that the lower bound is of the correct shape
// However again it was not necessary, all zeros is the default value
// Furthermore the upper bound was not even necessary in this case!
// As here it can be automagically inferred from the uses of data[iv]
//    return { iv -> myGenarray(shp, data[iv]) };
int[*] genarrayI (int[.] shp, int[*] data) | all (shp > 0)
{
    return {iv -> myGenarray(shp, data[iv])
        | shape(data)*0 <= iv < shape(data) };
}

// As part of the assignment you were supposed to
// add type patterns, and any additionally necessary constraints.
// E.g., the function signature should have been:
//       int[d:shp,v:vshp] myGenarray (int[d] shp, int[v:vshp] val) | all (shp >= 0)
// See the lecture for how to use these type patterns
int[*] myGenarray (int[.] shp, int[*] data) | all (shp > 0)
{
    // Almost correct, however the lower bound [0] was not necessary, and actually makes this incorrect.
    // By doing this, you restrict iv and shp to one-element vectors, because the shape of the lower and
    // upper bound must be the same. And since your lower bound is a constant [0], iv and shp must also
    // be one-element vectors
    return {iv -> data | [0] <= iv < shp};
    // return {iv -> data | iv < shp};
}

int[*] myReshape (int[.] shp, int[*] data)
{
    return reshape(shp, data);
}

int[*] plus (int[*] a, int[*] b)
{
    return a + b;
}

int[*], int[*] takedrop(int[.] shp, int[*] a) {
    x = take(shp, a);
    y = drop(shp, a);
    return (x, y);
}

double[*] sumV (double[+] a) {
    return [0.0];
}

double[n] recip (double[n] x) | all (x != 0.0)
{
    return 1.0/x;
}
