use StdIO: all;
use Array: all;
// use List: all except{drop, take};

int main() {

    // print(summ ( [ 1 , 2 , 3 , 4 , 5 ] ) == 15);
    // print(summ ( [ ] ) == 0);
    // print(summ ( [ [ 1 , 2 , 3 ] ,[ 4 , 5 , 6 ] ] ) == 21);
    // print(summ ( [ [ ] ] ) == 0);
    // print(reshape([3,3,3],iota(27)));
    // print(summ(reshape([3,3,3],iota(27))));
    a = iota(8);
    res = sumt(reshape([2,2,2], a));
    print(res);
    res = sumtt(reshape([2,2,2], a));
    print(res);
    return 1;
}

int summ(int[.] a){
    // print("doing seq [.]!");
    s = 0;
    for (i=0; i < shape(a)[0]; i++) {
        s += a[i];
    }
    return s;
}

int summ(int[.,.] a){
    // print("doing par [.,.]!");
    return summ({[i] -> summ(a[i])});
}

int summ(int[*] a){
    // print("doing par [*]!");
    v = {[i] -> summ(a[i])};
    return summ(v);
}

// Pattern 1

int sumt(int[*] a){
    v = {[i,j] -> summ(a[i,j])};
    print(v);
    return summ(v);
}

int sumtt(int[*] a) {
    v = {iv -> summ(a[iv]) | iv < drop([-1], shape(a)) };
    print(v);
    return summ(v);
}

// int summ(int[.] a){
//     s = 0;
//     for (i=0; i < shape(a)[0]; i++) {
//         s += a[i];
//     }
//     return s;
// }

// int summ(int[.,.] a){
//     return summ({[i] -> summ(a[i])});
// }

// Pattern 2 should work better because it has less forks and synchronizations


int foo (int[10000] a){
    val = a[0]; // scalar, no refcount
    if (val < 10) {
        b = modarray(a, [0], val+1); // uses a
        c = modarray(b, [1], a[1]+1); // uses b and a
    } else {
        c = modarray(a, [1], 0); // uses a
    }
    return c;
}


int foo (int[10000] a){
    INC_RC(a,2);
    val = a[0];
    DEC_RC_FREE(a);

    if (val < 10) {
        if (RC(a)==1){
            b = a;
        } else {
            ALLOC_INT(10000, b);
            COPY(a,b);
            DEC_RC_FREE(a);
        }
        b[0] = val+1;

        if (RC(b)==1){
            c = b;
        } else {
            ALLOC_INT(10000, c);
            COPY(b,c);
            DEC_RC_FREE(b);
        }
        c[1] = a[1]+1;
        DEC_FREE_RC(a);
    } else {
        DEC_FREE_RC(a);

        if (RC(a)==1){
            c = a;
        } else {
            ALLOC_INT(10000, c);
            COPY(a,c);
            DEC_RC_FREE(a);
        }
        c[1] = 0;
    }
    return c;
}






int foo (int[10000] a){
    val = a[0];

    if (val < 10) {
        x =  a[1]+1;
        if (RC(a)==1){
            b = a;
        } else {
            ALLOC_INT(10000, b);
            COPY(a,b);
            DEC_RC_FREE(a);
        }
        b[0] = val+1;
        c = b;
        c[1] = x;
    } else {
        if (RC(a)==1){
            c = a;
        } else {
            ALLOC_INT(10000, c);
            COPY(a,c);
            DEC_RC_FREE(a);
        }
        c[1] = 0;
    }
    return c;
}
