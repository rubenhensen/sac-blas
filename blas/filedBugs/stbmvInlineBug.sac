use StdIO: all;
use Array: all;
use BlasLevel1: all;
// use BlasLevel2: all;
// use Helper: all;

int main() {
  // // upper
  // a = reshape([4,4],tof([1,2,3,0,0,5,6,7,0,0,8,9,0,0,0,10]));
  // // compare('u','n','n', 4, a, 4, tof(iota(4)+1), 1);
  // print(a);
  // a = transpose(a);
  // print(a);
  // a = rotateCCW(a);
  // print(a);



  

  // a = {[i,j] -> a[i-k][j] |    [i,j] < [1+k,n]
  // a = {[i,j] -> a[i-k][j] | [i,j] < [1+1,4]};
  // print(a);
  // a = rotateCCW(a);
  // print(a);




  // a = reshape([2,3],tof([0,2,4,1,3,5]));

  
  // // lower
  // a = reshape([4,4],tof([1,0,0,0,2,3,0,0,4,5,6,0,7,8,9,10]));
  // compare('l','n','n', 4, a, 4, tof(iota(4)+1), 1);

  // // upper band
  // a = reshape([4,4],tof([1,2,3,4,0,5,6,7,0,0,8,9,0,0,0,10]));
  // compare('u','n','u', 4, a, 4, tof(iota(4)+1), 1);

  // // lower band
  // a = reshape([4,4],tof([1,0,0,0,2,3,0,0,4,5,6,0,7,8,9,10]));
  // compare('l','n','u', 4, a, 4, tof(iota(4)+1), 1);


  // // upper T
  // a = reshape([4,4],tof([1,2,3,4,0,5,6,7,0,0,8,9,0,0,0,10]));
  // compare('u','t','n', 4, a, 4, tof(iota(4)+1), 1);

  // a = reshape([3,3],tof([1,2,3,0,4,5,0,0,6]));
  // compare('u','t','n', 3, a, 3, tof(iota(3)+1), 1);

  // // lower T
  // a = reshape([4,4],tof([1,0,0,0,2,3,0,0,4,5,6,0,7,8,9,10]));
  // compare('l','t','n', 4, a, 4, tof(iota(4)+1), 1);

  // // upper band T
  // a = reshape([4,4],tof([1,2,3,4,0,5,6,7,0,0,8,9,0,0,0,10]));
  // compare('u','t','u', 4, a, 4, tof(iota(4)+1), 1);

  // // lower band T
  // a = reshape([4,4],tof([1,0,0,0,2,3,0,0,4,5,6,0,7,8,9,10]));
  // compare('l','t','u', 4, a, 4, tof(iota(4)+1), 1);


  // upper
  a = reshape([4,4],tof([1,2,0,0,0,5,6,0,0,0,8,9,0,0,0,10]));
  // compare('u','n','n', 4, a, 4, tof(iota(4)+1), 1);
  // print(a);
  // a = fullUpperTriangleStorageToBand(a, 1);
  // print(a);
  // a = storageUpperTriangleStorageToFull(a, 1);
  // print(a);
  return 0;
}

// float[n,n] storageUpperTriangleStorageToFull(float[m,n] full, int k) | (n-k-1 == am)
// {
//   print(full);
//   a = transpose(full);
//   print(a);
//   a = {iv -> take([1+k],drop(iv-[k],a[iv])) | iv < [n]};
//   print(a);
//   a = {iv -> padVectorFront(1+k,take(min([1+k],iv+1),a[iv])) | iv < [n]};
//   print(a);
//   a = transpose(a);
//   print(a);
//   return a;
// }

inline float[m] padVectorFront(int k, float[n] arr)
{
  zeros = [k-n];
  return { iv -> 0.0f           | iv < zeros;
           iv -> arr[iv-zeros]  | zeros <= iv < [k]
         };
}


inline bool eq (float[d1:shp1] a, float[d2:shp2] b) {
    return all(a == b) && all(shp1==shp2) && all(d1==d2);
}

inline float[am,n] fullUpperTriangleStorageToBand(float[m,n] full, int k) | (n-k-1 == am)
{
  a = transpose(full);
  a = {iv -> take([1+k],drop(iv-[k],a[iv])) | iv < [n]};
  a = {iv -> padVectorFront(1+k,take(min([1+k],iv+1),a[iv])) | iv < [n]};
  a = transpose(a);
  return a;
}

void compare(char uplo, char trans, char diag, int n, int k, float[an,am] a, int lda, float[xn] x, int incx)
{
    y1 = OpenBlas::stbmv(uplo, trans, diag, n, k, a, lda,  x, incx);
    y2 = stbmv(uplo, trans, diag, n, k, a, lda, x, incx);

    if(!(eq(y1,y2)))
    {
        printf("Error in stbmv. uplo:%c, trans:%c, diag:%c, n:%d, k:%d, lda:%d, incx:%d\n", uplo, trans, diag, n, k, lda, incx); 
        print(a);
        print(x);
        print(y1);
        print(y2);
        printf("\n");
    }
}

float[xn] stbmv(char uplo, char trans, char diag, int n, int k, float[an,am] a, int lda, float[xn] x, int incx)// | ismember(uplo, ['u', 'U', 'l', 'L']), ismember(trans, ['n', 'N', 't', 'T', 'c', 'C']), ismember(diag, ['u', 'U', 'n', 'N']), n >= 0,  incx != 0, lda >= max(1,n), k >= 0
{
  a = reshape([3,3],tof([1,2,0,0,3,4,0,0,5]));
  xt = { [iv] -> x[iv*incx] | [iv] < [n]};

  if (trans != 'N' && trans != 'n') {
    a = transpose(a);
    if (uplo == 'U' || uplo == 'u') {
      uplo = 'l';
    } else {
      uplo = 'u';
    }
  }

  inter = [1.0f];

  if ((uplo == 'U' || uplo == 'u') && (diag == 'N' || diag == 'n')) {
    // upper
    // a = bandStorageToFull(a, 0, k, n, n);
    print(a);
    inter = { [iv] -> sum(drop([iv],a[iv]) * drop([iv],xt)) | [iv] < [n] };
    print(inter);
  } 

  if ((uplo == 'U' || uplo == 'u') && (diag == 'U' || diag == 'u')) {
    // upper unit
    // a = bandStorageToFull(a, 0, k, n, n);
    inter = { [iv] -> sum(drop([iv+1],a[iv]) * drop([iv+1],xt)) + xt[iv] | [iv] < [n] };
  } 

  if ((uplo == 'L' || uplo == 'l') && (diag == 'N' || diag == 'n')) {
    // lower
    // a = bandStorageToFull(a, k, 0, n, n);
    inter = { [iv] -> sum(take([iv+1],a[iv]) * take([iv+1],xt)) | [iv] < [n] };
  } 
  
  if ((uplo == 'L' || uplo == 'l') && (diag == 'U' || diag == 'u')) {
    // lower unit
    // a = bandStorageToFull(a, k, 0, n, n);
    inter = { [iv] -> sum(take([iv],a[iv]) * take([iv],xt)) + xt[iv]| [iv] < [n] };
  } 


  res = { [iv] -> inter[iv/incx] | [iv] <= [(xn-1)*incx] step [incx]; 
          [iv] -> x[iv]};

  return res;
}
