use StdIO: all;
use BlasLevel1: all;
use BlasLevel2: all;
use Helper: all;
use Benchmarking: all;
use Structures: all;

int main() {
  manual();
  return 0;
}

/*
*  The ?gemv routines perform a matrix-vector operation defined as:
*  y := alpha*A*x + beta*y,
*  or
*  y := alpha*A'*x + beta*y,
*  or
*  y := alpha*conjg(A')*x + beta*y,
*  where:
*    alpha and beta are scalars,
*    x and y are vectors,
*    A is an m-by-n matrix.
*/

// float[yn] sgemv(char trans, int m, int n, float alpha, float[am,an] a, int lda, float[xn] x, int incx, float beta, float[yn] y, int incy) | ismember(trans, ['n', 'N', 't', 'T', 'c', 'C']), m >= 0, n >=0, lda >= max(1,n), sgemvXdim(trans, m, n, incx, xn), incx != 0, sgemvYdim(trans, m, n, incy, yn), incy != 0
// {
//   if (trans == 'N' | trans == 'n') {
//     lenx = n;
//     leny = m;
//   } else {
//     lenx = m;
//     leny = n;
//     a = transpose(a);
//   }

//   betaY =   BlasLevel1::sscal(leny, beta, y, incy);
//   alphaX =  {iv -> alpha * x[iv*incx]         | iv < [lenx]};
//   resA =    {iv -> sum(a[iv] * alphaX)        | iv < [leny]};
//   res =     {iv -> resA[iv/incy] +  betaY[iv] | iv <= [(leny-1)*incy] step [incy] ; iv -> y[iv]};

//   return res;
// }

void compare(char trans, int m, int n, float alpha, float[am,an] a, int lda, float[xn] x, int incx, float beta, float[yn] y, int incy)
{
    y1 = OpenBlas::sgemv(trans, m, n, alpha, a, lda, x, incx, beta, y, incy);
    y2 = sgemv(trans, m, n, alpha, a, lda, x, incx, beta, y, incy);
    
    if(!(almost_eq(y1,y2, 0.01f)))
    {
        printf("Error in sgemv. trans:%c, m:%d, n:%d, alpha:%f, lda:%d, incx:%d, beta:%f, incy:%d\n", trans, m, n, alpha, lda, incx, beta, incy); 
        printf("a:\n");
        print(a);
        printf("x:\n");
        print(x);
        printf("y:\n");
        print(y);
        printf("openblas y:\n");
        print(y1);
        printf("sac y:\n");
        print(y2);
        printf("\n");
    }
}

void manual() {
    // manual unit testing
    compare('n', 4, 3, 1.0f, tof(reshape([4,3], iota(12))), 3, tof([1,1,1]), 1, 0.0f, tof([1,1,1,1]), 1);
    compare('n', 4, 3, 2.0f, tof(reshape([4,3], iota(12))), 3, tof(iota(5)), 2, 0.0f, tof([1,1,1,1]), 1);
    compare('n', 4, 3, 2.0f, tof(reshape([4,3], iota(12))), 3, tof(iota(5)), 2, 1.0f, tof([1,1,1,1]), 1);
    compare('n', 4, 3, 2.0f, tof(reshape([4,3], iota(12))), 3, tof(iota(5)), 2, 0.0f, tof(iota(4)), 1);
    compare('n', 4, 3, 2.0f, tof(reshape([4,3], iota(12))), 3, tof(iota(5)), 2, 1.0f, tof(iota(7)), 2);
    compare('n', 4, 3, 2.0f, tof(reshape([4,3], iota(12))), 3, tof(iota(5)), 2, 0.0f, tof(iota(7)), 2);
    compare('n', 4, 3, 0.3235f, tof(reshape([4,3], iota(12))), 3, tof(iota(5)), 2, 0.0f, tof(iota(9)), 2);
    compare('n', 4, 3, 1.0f, tof(reshape([4,3], iota(12))), 3, tof(iota(5)), 2, 33.0f, tof(iota(7)), 2);
    compare('n', 4, 3, 2.34556f, tof(reshape([4,3], iota(12))), 3, tof(iota(5)), 2, 42.7f, tof(iota(9)), 2);
    compare('t', 3, 4, 1.0f, tof(reshape([3,4], iota(12))), 4, tof([1,1,1]), 1, 0.0f, tof([1,1,1,1]), 1);
    compare('t', 3, 4, 2.0f, tof(reshape([3,4], iota(12))), 4, tof(iota(5)), 2, 0.0f, tof([1,1,1,1]), 1);
    compare('t', 3, 4, 2.0f, tof(reshape([3,4], iota(12))), 4, tof(iota(5)), 2, 1.0f, tof([1,1,1,1]), 1);
    compare('t', 3, 4, 2.0f, tof(reshape([3,4], iota(12))), 4, tof(iota(5)), 2, 0.0f, tof(iota(4)), 1);
    compare('t', 3, 4, 2.0f, tof(reshape([3,4], iota(12))), 4, tof(iota(5)), 2, 1.0f, tof(iota(7)), 2);
    compare('t', 3, 4, 2.0f, tof(reshape([3,4], iota(12))), 4, tof(iota(5)), 2, 0.0f, tof(iota(7)), 2);
    compare('t', 3, 4, 0.3235f, tof(reshape([3,4], iota(12))), 4, tof(iota(5)), 2, 0.0f, tof(iota(9)), 2);
    compare('t', 3, 4, 1.0f, tof(reshape([3,4], iota(12))), 4, tof(iota(5)), 2, 33.0f, tof(iota(7)), 2);
    compare('t', 3, 4, 2.34556f, tof(reshape([3,4], iota(12))), 4, tof(iota(5)), 2, 42.7f, tof(iota(9)), 2);
    print("done");
}
