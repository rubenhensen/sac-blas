use StdIO: all;
use Array: all;
// use BlasLevel1: all;
// use BlasLevel2: all;
use Helper: all;

int main() {
    // compare('u', n, alpha, ap, x, incx, beta, y, incy);
    // upper = tof([[1,2,3],[0,1,2],[0,0,1]]);
    // print(upper);
    // upper = trttps('u', upper);
    // print(upper);
    // upper = trttrs('u', upper, 3);
    // print(upper);

    // lower = tof([[1,0,0],[2,1,0],[3,2,1]]);
    // print(lower);
    // lower = trttps('l', lower);
    // print(lower);
    // lower = trttrs('l', lower, 3);
    // print(lower);

    upper = tof([[1,2,3],[0,1,2],[0,0,1]]);
    upper = trttps('u', upper); 
    // print(upper);
    // a = trttrs('u', upper, 3);
    // print(a);

    compare('u', 3, 1.0f, upper, tof(iota(3)), 1, 1.0f, tof(iota(3)+1), 1);


    return 0;
}

void compare(char uplo, int n, float alpha, float[.] ap, float[xn] x, int incx, float beta, float[yn] y, int incy)
{
    y1 = OpenBlas::sspmv(uplo, n, alpha, ap, x, incx, beta, y, incy);
    y2 = sspmv(uplo, n, alpha, ap, x, incx, beta, y, incy);
    
    if(!(almost_eq(y1,y2,0.01f)))
    {
        printf("Error in sspmv. uplo:%c, n:%d, alpha:%f, incx:%d, beta:%f, incy:%d\n", uplo, n, alpha, incx, beta, incy); 
        print(ap);
        print(x);
        print(y);
        print(y1);
        print(y2);
        printf("\n");
    }
}

float[yn] sspmv(char uplo, int n, float alpha, float[.] ap, float[xn] x, int incx, float beta, float[yn] y, int incy)
{
    a = trttrs('u', ap, n);
    betaY =   BlasLevel1::sscal(n, beta, y, incy);
    alphaX =  {iv -> alpha * x[iv*incx]         | iv < [n]};
    if (uplo == 'u' || uplo == 'U') {
        resA =    {iv -> sum((take(iv, transpose(a)[iv]) ++ drop(iv, a[iv])) * alphaX) | iv < [n]};
    } else {
        resA =    {iv -> sum((take(iv, a[iv]) ++ drop(iv, transpose(a)[iv])) * alphaX) | iv < [n]};
    }
    res =     {iv -> resA[iv/incy] +  betaY[iv] | iv <= [(n-1)*incy] step [incy] ; iv -> y[iv]};

   return res;
}
